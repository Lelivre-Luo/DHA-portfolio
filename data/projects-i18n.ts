// This file is auto-generated. Do not edit manually.
// Run 'pnpm run build:content' to regenerate.

export type Project = {
  id: number
  title_en: string
  title_zh: string
  description_en: string
  description_zh: string
  image?: string | null
  tags_en: string[]
  tags_zh: string[]
  github: string
  demo: string | null
  content_en: string
  content_zh: string
}

const allProjects: Project[] = [
  {
    "id": 1,
    "title_en": "[待替换waiting] AI Cursor Init - AI-powered documentation framework",
    "title_zh": "[待替换waiting] AI Cursor Init - AI驱动的文档框架",
    "description_en": "[待替换waiting] The AI-powered documentation framework that lives inside your IDE. Generate Architecture Decision Records, system diagrams, and onboarding guides with simple slash commands.",
    "description_zh": "[待替换waiting] 一个集成在 IDE 中的 AI 文档框架，通过斜杠命令生成 ADR、系统图与入门指南，保持文档与代码同步。",
    "image": "[待替换waiting] https://github.com/mgiovani/ai-cursor-init/raw/main/images/system-architecture-example.png",
    "tags_en": [
      "[待替换waiting] AI",
      "[待替换waiting] Documentation",
      "[待替换waiting] IDE",
      "[待替换waiting] Framework"
    ],
    "tags_zh": [
      "[待替换waiting] AI",
      "[待替换waiting] 文档",
      "[待替换waiting] IDE",
      "[待替换waiting] 框架"
    ],
    "github": "[待替换waiting] https://github.com/mgiovani/ai-cursor-init/",
    "demo": "[待替换waiting] https://github.com/mgiovani/ai-cursor-init/?tab=readme-ov-file#-visual-showcase",
    "content_en": "<h1>[待替换waiting] AI Cursor Init</h1>\n<p>[待替换waiting] AI Cursor Init is a revolutionary documentation framework designed to streamline the development process by integrating AI-powered documentation generation directly into your IDE. This project addresses the common challenge of maintaining up-to-date technical documentation in fast-paced development environments.</p>\n<h2>[待替换waiting] Key Features</h2>\n<h3>[待替换waiting] 🚀 Slash Commands</h3>\n<p>[待替换waiting] Generate comprehensive documentation with simple slash commands:</p>\n<ul>\n<li>[待替换waiting] <code>/adr</code> - Create Architecture Decision Records</li>\n<li>[待替换waiting] <code>/diagram</code> - Generate system diagrams</li>\n<li>[待替换waiting] <code>/onboard</code> - Create onboarding guides</li>\n<li>[待替换waiting] <code>/api</code> - Generate API documentation</li>\n</ul>\n<h3>[待替换waiting] 🤖 AI-Powered Generation</h3>\n<p>[待替换waiting] Leverages advanced AI models to:</p>\n<ul>\n<li>[待替换waiting] Understand code context and architecture</li>\n<li>[待替换waiting] Generate accurate technical documentation</li>\n<li>[待替换waiting] Maintain consistency across documentation</li>\n<li>[待替换waiting] Adapt to different project structures</li>\n</ul>\n<h3>[待替换waiting] 📊 Visual System Diagrams</h3>\n<p>[待替换waiting] Automatically generate:</p>\n<ul>\n<li>[待替换waiting] System architecture diagrams</li>\n<li>[待替换waiting] Data flow diagrams</li>\n<li>[待替换waiting] Component relationship maps</li>\n<li>[待替换waiting] Deployment diagrams</li>\n</ul>\n<h2>[待替换waiting] Technical Implementation</h2>\n<h3>[待替换waiting] Core Technologies</h3>\n<ul>\n<li>[待替换waiting] <strong>TypeScript</strong>: Primary development language</li>\n<li>[待替换waiting] <strong>VS Code API</strong>: IDE integration</li>\n<li>[待替换waiting] <strong>OpenAI GPT</strong>: AI model integration</li>\n<li>[待替换waiting] <strong>Mermaid</strong>: Diagram generation</li>\n<li>[待替换waiting] <strong>Markdown</strong>: Documentation format</li>\n</ul>\n<h3>[待替换waiting] Architecture</h3>\n<p>[待替换waiting] The framework follows a modular architecture with clear separation of concerns:</p>\n<pre><code>src/\n├── commands/          # Slash command handlers\n├── ai/               # AI integration layer\n├── generators/       # Documentation generators\n├── templates/        # Documentation templates\n└── utils/           # Utility functions\n</code></pre>\n<h2>[待替换waiting] Installation and Setup</h2>\n<h3>[待替换waiting] Prerequisites</h3>\n<ul>\n<li>[待替换waiting] VS Code or Cursor IDE</li>\n<li>[待替换waiting] Node.js 16+</li>\n<li>[待替换waiting] OpenAI API key</li>\n</ul>\n<h3>[待替换waiting] Installation</h3>\n<pre><code class=\"language-bash\"># Clone the repository\ngit clone https://github.com/mgiovani/ai-cursor-init.git\n\n# Install dependencies\nnpm install\n\n# Configure OpenAI API key\nexport OPENAI_API_KEY=\"your-api-key-here\"\n\n# Build the extension\nnpm run build\n</code></pre>\n<h3>[待替换waiting] Usage</h3>\n<ol>\n<li>[待替换waiting] Open your project in VS Code/Cursor</li>\n<li>[待替换waiting] Use slash commands in any file</li>\n<li>[待替换waiting] AI generates documentation based on your code</li>\n<li>[待替换waiting] Review and customize the generated content</li>\n</ol>\n<h2>[待替换waiting] Benefits</h2>\n<h3>[待替换waiting] For Developers</h3>\n<ul>\n<li>[待替换waiting] <strong>Reduced Documentation Overhead</strong>: Generate docs with simple commands</li>\n<li>[待替换waiting] <strong>Consistent Documentation</strong>: AI ensures consistent style and format</li>\n<li>[待替换waiting] <strong>Time Savings</strong>: Focus on coding instead of writing documentation</li>\n<li>[待替换waiting] <strong>Better Onboarding</strong>: New team members get comprehensive guides</li>\n</ul>\n<h3>[待替换waiting] For Teams</h3>\n<ul>\n<li>[待替换waiting] <strong>Improved Knowledge Sharing</strong>: Better documentation leads to better collaboration</li>\n<li>[待替换waiting] <strong>Reduced Context Switching</strong>: Stay in your IDE while generating docs</li>\n<li>[待替换waiting] <strong>Standardized Processes</strong>: Consistent documentation across projects</li>\n<li>[待替换waiting] <strong>Better Project Understanding</strong>: Visual diagrams help understand complex systems</li>\n</ul>\n<h2>[待替换waiting] Future Roadmap</h2>\n<h3>[待替换waiting] Planned Features</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [待替换waiting] Integration with more IDEs</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [待替换waiting] Custom template support</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [待替换waiting] Team collaboration features</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [待替换waiting] Documentation versioning</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [待替换waiting] Automated testing documentation</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [待替换waiting] Code comment generation</li>\n</ul>\n<h3>[待替换waiting] Community Contributions</h3>\n<p>[待替换waiting] We welcome contributions from the community! Areas where you can help:</p>\n<ul>\n<li>[待替换waiting] New slash commands</li>\n<li>[待替换waiting] Additional diagram types</li>\n<li>[待替换waiting] IDE integrations</li>\n<li>[待替换waiting] Documentation improvements</li>\n<li>[待替换waiting] Bug fixes and feature requests</li>\n</ul>\n<h2>[待替换waiting] Getting Involved</h2>\n<h3>[待替换waiting] Contributing</h3>\n<ol>\n<li>[待替换waiting] Fork the repository</li>\n<li>[待替换waiting] Create a feature branch</li>\n<li>[待替换waiting] Make your changes</li>\n<li>[待替换waiting] Add tests if applicable</li>\n<li>[待替换waiting] Submit a pull request</li>\n</ol>\n<h3>[待替换waiting] Reporting Issues</h3>\n<p>[待替换waiting] Found a bug or have a feature request? Please open an issue on GitHub with:</p>\n<ul>\n<li>[待替换waiting] Clear description of the problem</li>\n<li>[待替换waiting] Steps to reproduce</li>\n<li>[待替换waiting] Expected vs actual behavior</li>\n<li>[待替换waiting] Environment details</li>\n</ul>\n<h2>[待替换waiting] License</h2>\n<p>[待替换waiting] This project is licensed under the MIT License - see the <a href=\"LICENSE\">LICENSE</a> file for details.</p>\n<h2>[待替换waiting] Acknowledgments</h2>\n<ul>\n<li>[待替换waiting] OpenAI for providing the AI models</li>\n<li>[待替换waiting] VS Code team for the excellent extension API</li>\n<li>[待替换waiting] Mermaid team for diagram generation</li>\n<li>[待替换waiting] The open-source community for inspiration and feedback</li>\n</ul>\n<hr>\n<p><em>[待替换waiting] AI Cursor Init - Making documentation as easy as writing code.</em></p>\n",
    "content_zh": "<h1>[待替换waiting] AI Cursor Init</h1>\n<p>[待替换waiting] AI Cursor Init is a revolutionary documentation framework designed to streamline the development process by integrating AI-powered documentation generation directly into your IDE. This project addresses the common challenge of maintaining up-to-date technical documentation in fast-paced development environments.</p>\n<h2>[待替换waiting] Key Features</h2>\n<h3>[待替换waiting] 🚀 Slash Commands</h3>\n<p>[待替换waiting] Generate comprehensive documentation with simple slash commands:</p>\n<ul>\n<li>[待替换waiting] <code>/adr</code> - Create Architecture Decision Records</li>\n<li>[待替换waiting] <code>/diagram</code> - Generate system diagrams</li>\n<li>[待替换waiting] <code>/onboard</code> - Create onboarding guides</li>\n<li>[待替换waiting] <code>/api</code> - Generate API documentation</li>\n</ul>\n<h3>[待替换waiting] 🤖 AI-Powered Generation</h3>\n<p>[待替换waiting] Leverages advanced AI models to:</p>\n<ul>\n<li>[待替换waiting] Understand code context and architecture</li>\n<li>[待替换waiting] Generate accurate technical documentation</li>\n<li>[待替换waiting] Maintain consistency across documentation</li>\n<li>[待替换waiting] Adapt to different project structures</li>\n</ul>\n<h3>[待替换waiting] 📊 Visual System Diagrams</h3>\n<p>[待替换waiting] Automatically generate:</p>\n<ul>\n<li>[待替换waiting] System architecture diagrams</li>\n<li>[待替换waiting] Data flow diagrams</li>\n<li>[待替换waiting] Component relationship maps</li>\n<li>[待替换waiting] Deployment diagrams</li>\n</ul>\n<h2>[待替换waiting] Technical Implementation</h2>\n<h3>[待替换waiting] Core Technologies</h3>\n<ul>\n<li>[待替换waiting] <strong>TypeScript</strong>: Primary development language</li>\n<li>[待替换waiting] <strong>VS Code API</strong>: IDE integration</li>\n<li>[待替换waiting] <strong>OpenAI GPT</strong>: AI model integration</li>\n<li>[待替换waiting] <strong>Mermaid</strong>: Diagram generation</li>\n<li>[待替换waiting] <strong>Markdown</strong>: Documentation format</li>\n</ul>\n<h3>[待替换waiting] Architecture</h3>\n<p>[待替换waiting] The framework follows a modular architecture with clear separation of concerns:</p>\n<pre><code>src/\n├── commands/          # Slash command handlers\n├── ai/               # AI integration layer\n├── generators/       # Documentation generators\n├── templates/        # Documentation templates\n└── utils/           # Utility functions\n</code></pre>\n<h2>[待替换waiting] Installation and Setup</h2>\n<h3>[待替换waiting] Prerequisites</h3>\n<ul>\n<li>[待替换waiting] VS Code or Cursor IDE</li>\n<li>[待替换waiting] Node.js 16+</li>\n<li>[待替换waiting] OpenAI API key</li>\n</ul>\n<h3>[待替换waiting] Installation</h3>\n<pre><code class=\"language-bash\"># Clone the repository\ngit clone https://github.com/mgiovani/ai-cursor-init.git\n\n# Install dependencies\nnpm install\n\n# Configure OpenAI API key\nexport OPENAI_API_KEY=\"your-api-key-here\"\n\n# Build the extension\nnpm run build\n</code></pre>\n<h3>[待替换waiting] Usage</h3>\n<ol>\n<li>[待替换waiting] Open your project in VS Code/Cursor</li>\n<li>[待替换waiting] Use slash commands in any file</li>\n<li>[待替换waiting] AI generates documentation based on your code</li>\n<li>[待替换waiting] Review and customize the generated content</li>\n</ol>\n<h2>[待替换waiting] Benefits</h2>\n<h3>[待替换waiting] For Developers</h3>\n<ul>\n<li>[待替换waiting] <strong>Reduced Documentation Overhead</strong>: Generate docs with simple commands</li>\n<li>[待替换waiting] <strong>Consistent Documentation</strong>: AI ensures consistent style and format</li>\n<li>[待替换waiting] <strong>Time Savings</strong>: Focus on coding instead of writing documentation</li>\n<li>[待替换waiting] <strong>Better Onboarding</strong>: New team members get comprehensive guides</li>\n</ul>\n<h3>[待替换waiting] For Teams</h3>\n<ul>\n<li>[待替换waiting] <strong>Improved Knowledge Sharing</strong>: Better documentation leads to better collaboration</li>\n<li>[待替换waiting] <strong>Reduced Context Switching</strong>: Stay in your IDE while generating docs</li>\n<li>[待替换waiting] <strong>Standardized Processes</strong>: Consistent documentation across projects</li>\n<li>[待替换waiting] <strong>Better Project Understanding</strong>: Visual diagrams help understand complex systems</li>\n</ul>\n<h2>[待替换waiting] Future Roadmap</h2>\n<h3>[待替换waiting] Planned Features</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [待替换waiting] Integration with more IDEs</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [待替换waiting] Custom template support</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [待替换waiting] Team collaboration features</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [待替换waiting] Documentation versioning</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [待替换waiting] Automated testing documentation</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> [待替换waiting] Code comment generation</li>\n</ul>\n<h3>[待替换waiting] Community Contributions</h3>\n<p>[待替换waiting] We welcome contributions from the community! Areas where you can help:</p>\n<ul>\n<li>[待替换waiting] New slash commands</li>\n<li>[待替换waiting] Additional diagram types</li>\n<li>[待替换waiting] IDE integrations</li>\n<li>[待替换waiting] Documentation improvements</li>\n<li>[待替换waiting] Bug fixes and feature requests</li>\n</ul>\n<h2>[待替换waiting] Getting Involved</h2>\n<h3>[待替换waiting] Contributing</h3>\n<ol>\n<li>[待替换waiting] Fork the repository</li>\n<li>[待替换waiting] Create a feature branch</li>\n<li>[待替换waiting] Make your changes</li>\n<li>[待替换waiting] Add tests if applicable</li>\n<li>[待替换waiting] Submit a pull request</li>\n</ol>\n<h3>[待替换waiting] Reporting Issues</h3>\n<p>[待替换waiting] Found a bug or have a feature request? Please open an issue on GitHub with:</p>\n<ul>\n<li>[待替换waiting] Clear description of the problem</li>\n<li>[待替换waiting] Steps to reproduce</li>\n<li>[待替换waiting] Expected vs actual behavior</li>\n<li>[待替换waiting] Environment details</li>\n</ul>\n<h2>[待替换waiting] License</h2>\n<p>[待替换waiting] This project is licensed under the MIT License - see the <a href=\"LICENSE\">LICENSE</a> file for details.</p>\n<h2>[待替换waiting] Acknowledgments</h2>\n<ul>\n<li>[待替换waiting] OpenAI for providing the AI models</li>\n<li>[待替换waiting] VS Code team for the excellent extension API</li>\n<li>[待替换waiting] Mermaid team for diagram generation</li>\n<li>[待替换waiting] The open-source community for inspiration and feedback</li>\n</ul>\n<hr>\n<p><em>[待替换waiting] AI Cursor Init - Making documentation as easy as writing code.</em></p>\n"
  },
  {
    "id": 2,
    "title_en": "[待替换] Base 16 Whatsapp Theme",
    "title_zh": "[待替换] Base 16 Whatsapp 主题",
    "description_en": "[待替换] A Whatsapp Web theme inspired by the Dark Base 16 colors.",
    "description_zh": "[待替换] 受 Base 16 暗色配色启发的 WhatsApp Web 主题。",
    "image": "[待替换] https://camo.githubusercontent.com/1b6684c7c3ad58073423a154fa0709eb215c096fec5aa32b6a430240aaa7ce55/68747470733a2f2f692e696d6775722e636f6d2f733134694f54392e706e67",
    "tags_en": [
      "[待替换] CSS",
      "[待替换] Javascript"
    ],
    "tags_zh": [
      "[待替换] CSS",
      "[待替换] Javascript"
    ],
    "github": "[待替换] https://github.com/mgiovani/base16-whatsapp",
    "demo": "[待替换] null",
    "content_en": "<h1>[待替换] Base 16 Whatsapp Theme</h1>\n<p>[待替换] A Whatsapp Web theme inspired by the Dark Base 16 colors.</p>\n<h2>[待替换] Features</h2>\n<ul>\n<li>[待替换] <strong>Dark Theme</strong>: Easy on the eyes with Base 16 color palette</li>\n<li>[待替换] <strong>Customizable</strong>: Modify colors to match your preferences</li>\n<li>[待替换] <strong>Easy Installation</strong>: Simple browser extension setup</li>\n<li>[待替换] <strong>Responsive</strong>: Works on all screen sizes</li>\n</ul>\n<h2>[待替换] Installation</h2>\n<h3>[待替换] Method 1: Browser Extension</h3>\n<ol>\n<li>[待替换] Install a CSS injection extension (like Stylus)</li>\n<li>[待替换] Copy the CSS code from the repository</li>\n<li>[待替换] Apply to WhatsApp Web domain</li>\n<li>[待替换] Enjoy your new dark theme!</li>\n</ol>\n<h3>[待替换] Method 2: Manual CSS</h3>\n<ol>\n<li>[待替换] Open WhatsApp Web</li>\n<li>[待替换] Open browser developer tools (F12)</li>\n<li>[待替换] Go to Console tab</li>\n<li>[待替换] Paste the CSS code</li>\n<li>[待替换] Press Enter to apply</li>\n</ol>\n<h2>[待替换] Customization</h2>\n<p>[待替换] You can easily customize the theme by modifying the CSS variables:</p>\n<pre><code class=\"language-css\">:root {\n  --base00: #181818;  /* Background */\n  --base01: #282828;  /* Lighter background */\n  --base02: #383838;  /* Selection background */\n  --base03: #585858;  /* Comments */\n  --base04: #b8b8b8;  /* Dark foreground */\n  --base05: #d8d8d8;  /* Default foreground */\n  --base06: #e8e8e8;  /* Light foreground */\n  --base07: #f8f8f8;  /* Lightest foreground */\n  --base08: #ab4642;  /* Red */\n  --base09: #dc9656;  /* Orange */\n  --base0a: #f7ca88;  /* Yellow */\n  --base0b: #a1b56c;  /* Green */\n  --base0c: #86c1b9;  /* Cyan */\n  --base0d: #7cafc2;  /* Blue */\n  --base0e: #ba8baf;  /* Magenta */\n  --base0f: #a16946;  /* Brown */\n}\n</code></pre>\n<h2>[待替换] Color Palette</h2>\n<p>[待替换] The theme uses the Base 16 color scheme:</p>\n<ul>\n<li>[待替换] <strong>Background</strong>: Dark gray (#181818)</li>\n<li>[待替换] <strong>Text</strong>: Light gray (#d8d8d8)</li>\n<li>[待替换] <strong>Accent</strong>: Blue (#7cafc2)</li>\n<li>[待替换] <strong>Success</strong>: Green (#a1b56c)</li>\n<li>[待替换] <strong>Warning</strong>: Orange (#dc9656)</li>\n<li>[待替换] <strong>Error</strong>: Red (#ab4642)</li>\n</ul>\n<h2>[待替换] Compatibility</h2>\n<ul>\n<li>[待替换] <strong>Chrome</strong>: ✅ Fully supported</li>\n<li>[待替换] <strong>Firefox</strong>: ✅ Fully supported</li>\n<li>[待替换] <strong>Safari</strong>: ✅ Fully supported</li>\n<li>[待替换] <strong>Edge</strong>: ✅ Fully supported</li>\n</ul>\n<h2>[待替换] Contributing</h2>\n<p>[待替换] Contributions are welcome! Here's how you can help:</p>\n<ol>\n<li>[待替换] <strong>Report Issues</strong>: Found a bug? Open an issue</li>\n<li>[待替换] <strong>Suggest Features</strong>: Have an idea? Let us know</li>\n<li>[待替换] <strong>Submit PRs</strong>: Fix bugs or add features</li>\n<li>[待替换] <strong>Improve Documentation</strong>: Help others understand the project</li>\n</ol>\n<h2>[待替换] License</h2>\n<p>[待替换] This project is licensed under the MIT License.</p>\n<h2>[待替换] Acknowledgments</h2>\n<ul>\n<li>[待替换] Base 16 color scheme creators</li>\n<li>[待替换] WhatsApp Web team</li>\n<li>[待替换] CSS community for inspiration</li>\n</ul>\n<hr>\n<p><em>[待替换] Enjoy your new dark WhatsApp Web experience!</em></p>\n",
    "content_zh": "<h1>[待替换] Base 16 Whatsapp Theme</h1>\n<p>[待替换] A Whatsapp Web theme inspired by the Dark Base 16 colors.</p>\n<h2>[待替换] Features</h2>\n<ul>\n<li>[待替换] <strong>Dark Theme</strong>: Easy on the eyes with Base 16 color palette</li>\n<li>[待替换] <strong>Customizable</strong>: Modify colors to match your preferences</li>\n<li>[待替换] <strong>Easy Installation</strong>: Simple browser extension setup</li>\n<li>[待替换] <strong>Responsive</strong>: Works on all screen sizes</li>\n</ul>\n<h2>[待替换] Installation</h2>\n<h3>[待替换] Method 1: Browser Extension</h3>\n<ol>\n<li>[待替换] Install a CSS injection extension (like Stylus)</li>\n<li>[待替换] Copy the CSS code from the repository</li>\n<li>[待替换] Apply to WhatsApp Web domain</li>\n<li>[待替换] Enjoy your new dark theme!</li>\n</ol>\n<h3>[待替换] Method 2: Manual CSS</h3>\n<ol>\n<li>[待替换] Open WhatsApp Web</li>\n<li>[待替换] Open browser developer tools (F12)</li>\n<li>[待替换] Go to Console tab</li>\n<li>[待替换] Paste the CSS code</li>\n<li>[待替换] Press Enter to apply</li>\n</ol>\n<h2>[待替换] Customization</h2>\n<p>[待替换] You can easily customize the theme by modifying the CSS variables:</p>\n<pre><code class=\"language-css\">:root {\n  --base00: #181818;  /* Background */\n  --base01: #282828;  /* Lighter background */\n  --base02: #383838;  /* Selection background */\n  --base03: #585858;  /* Comments */\n  --base04: #b8b8b8;  /* Dark foreground */\n  --base05: #d8d8d8;  /* Default foreground */\n  --base06: #e8e8e8;  /* Light foreground */\n  --base07: #f8f8f8;  /* Lightest foreground */\n  --base08: #ab4642;  /* Red */\n  --base09: #dc9656;  /* Orange */\n  --base0a: #f7ca88;  /* Yellow */\n  --base0b: #a1b56c;  /* Green */\n  --base0c: #86c1b9;  /* Cyan */\n  --base0d: #7cafc2;  /* Blue */\n  --base0e: #ba8baf;  /* Magenta */\n  --base0f: #a16946;  /* Brown */\n}\n</code></pre>\n<h2>[待替换] Color Palette</h2>\n<p>[待替换] The theme uses the Base 16 color scheme:</p>\n<ul>\n<li>[待替换] <strong>Background</strong>: Dark gray (#181818)</li>\n<li>[待替换] <strong>Text</strong>: Light gray (#d8d8d8)</li>\n<li>[待替换] <strong>Accent</strong>: Blue (#7cafc2)</li>\n<li>[待替换] <strong>Success</strong>: Green (#a1b56c)</li>\n<li>[待替换] <strong>Warning</strong>: Orange (#dc9656)</li>\n<li>[待替换] <strong>Error</strong>: Red (#ab4642)</li>\n</ul>\n<h2>[待替换] Compatibility</h2>\n<ul>\n<li>[待替换] <strong>Chrome</strong>: ✅ Fully supported</li>\n<li>[待替换] <strong>Firefox</strong>: ✅ Fully supported</li>\n<li>[待替换] <strong>Safari</strong>: ✅ Fully supported</li>\n<li>[待替换] <strong>Edge</strong>: ✅ Fully supported</li>\n</ul>\n<h2>[待替换] Contributing</h2>\n<p>[待替换] Contributions are welcome! Here's how you can help:</p>\n<ol>\n<li>[待替换] <strong>Report Issues</strong>: Found a bug? Open an issue</li>\n<li>[待替换] <strong>Suggest Features</strong>: Have an idea? Let us know</li>\n<li>[待替换] <strong>Submit PRs</strong>: Fix bugs or add features</li>\n<li>[待替换] <strong>Improve Documentation</strong>: Help others understand the project</li>\n</ol>\n<h2>[待替换] License</h2>\n<p>[待替换] This project is licensed under the MIT License.</p>\n<h2>[待替换] Acknowledgments</h2>\n<ul>\n<li>[待替换] Base 16 color scheme creators</li>\n<li>[待替换] WhatsApp Web team</li>\n<li>[待替换] CSS community for inspiration</li>\n</ul>\n<hr>\n<p><em>[待替换] Enjoy your new dark WhatsApp Web experience!</em></p>\n"
  },
  {
    "id": 3,
    "title_en": "[待替换] COVID-19 Data Tracker",
    "title_zh": "[待替换] COVID-19 数据追踪器",
    "description_en": "[待替换] A comprehensive COVID-19 data tracking application with real-time statistics, interactive charts, and global coverage.",
    "description_zh": "[待替换] 一个全面的 COVID-19 数据追踪应用，具有实时统计、交互式图表和全球覆盖。",
    "image": "[待替换] https://camo.githubusercontent.com/1b6684c7c3ad58073423a154fa0709eb215c096fec5aa32b6a430240aaa7ce55/68747470733a2f2f692e696d6775722e636f6d2f733134694f54392e706e67",
    "tags_en": [
      "[待替换] React",
      "[待替换] TypeScript",
      "[待替换] Chart.js",
      "[待替换] API"
    ],
    "tags_zh": [
      "[待替换] React",
      "[待替换] TypeScript",
      "[待替换] Chart.js",
      "[待替换] API"
    ],
    "github": "[待替换] https://github.com/mgiovani/covid-data-tracker",
    "demo": "[待替换] https://covid-tracker-demo.vercel.app",
    "content_en": "<h1>[待替换] COVID-19 Data Tracker</h1>\n<p>[待替换] A comprehensive COVID-19 data tracking application that provides real-time statistics, interactive visualizations, and detailed analysis of the pandemic's impact worldwide.</p>\n<h2>[待替换] Key Features</h2>\n<h3>[待替换] 📊 Real-time Data</h3>\n<ul>\n<li>[待替换] <strong>Live Statistics</strong>: Up-to-date COVID-19 data from reliable sources</li>\n<li>[待替换] <strong>Global Coverage</strong>: Data from 200+ countries and territories</li>\n<li>[待替换] <strong>Historical Trends</strong>: Track data changes over time</li>\n<li>[待替换] <strong>Automatic Updates</strong>: Data refreshes every hour</li>\n</ul>\n<h3>[待替换] 📈 Interactive Visualizations</h3>\n<ul>\n<li>[待替换] <strong>Line Charts</strong>: Track case trends over time</li>\n<li>[待替换] <strong>Bar Charts</strong>: Compare statistics between countries</li>\n<li>[待替换] <strong>Pie Charts</strong>: Visualize data distribution</li>\n<li>[待替换] <strong>Maps</strong>: Geographic representation of data</li>\n</ul>\n<h3>[待替换] 🔍 Advanced Analytics</h3>\n<ul>\n<li>[待替换] <strong>Growth Rates</strong>: Calculate daily/weekly growth percentages</li>\n<li>[待替换] <strong>Comparisons</strong>: Compare multiple countries side-by-side</li>\n<li>[待替换] <strong>Predictions</strong>: Basic trend forecasting</li>\n<li>[待替换] <strong>Export Data</strong>: Download data in CSV format</li>\n</ul>\n<h2>[待替换] Technical Stack</h2>\n<h3>[待替换] Frontend</h3>\n<ul>\n<li>[待替换] <strong>React 18</strong>: Modern React with hooks and concurrent features</li>\n<li>[待替换] <strong>TypeScript</strong>: Type-safe development</li>\n<li>[待替换] <strong>Chart.js</strong>: Interactive chart library</li>\n<li>[待替换] <strong>Tailwind CSS</strong>: Utility-first CSS framework</li>\n<li>[待替换] <strong>React Query</strong>: Data fetching and caching</li>\n</ul>\n<h3>[待替换] Backend</h3>\n<ul>\n<li>[待替换] <strong>Node.js</strong>: Server-side JavaScript runtime</li>\n<li>[待替换] <strong>Express</strong>: Web application framework</li>\n<li>[待替换] <strong>MongoDB</strong>: NoSQL database for data storage</li>\n<li>[待替换] <strong>Redis</strong>: Caching layer for improved performance</li>\n</ul>\n<h3>[待替换] Data Sources</h3>\n<ul>\n<li>[待替换] <strong>Johns Hopkins CSSE</strong>: Primary data source</li>\n<li>[待替换] <strong>WHO</strong>: World Health Organization data</li>\n<li>[待替换] <strong>Our World in Data</strong>: Additional statistics</li>\n<li>[待替换] <strong>News API</strong>: Related news articles</li>\n</ul>\n<h2>[待替换] Installation</h2>\n<h3>[待替换] Prerequisites</h3>\n<ul>\n<li>[待替换] Node.js 16+</li>\n<li>[待替换] MongoDB 4.4+</li>\n<li>[待替换] Redis 6+</li>\n</ul>\n<h3>[待替换] Setup</h3>\n<pre><code class=\"language-bash\"># Clone the repository\ngit clone https://github.com/mgiovani/covid-data-tracker.git\n\n# Install dependencies\nnpm install\n\n# Set up environment variables\ncp .env.example .env\n# Edit .env with your configuration\n\n# Start the development server\nnpm run dev\n</code></pre>\n<h3>[待替换] Environment Variables</h3>\n<pre><code class=\"language-env\">MONGODB_URI=mongodb://localhost:27017/covid-tracker\nREDIS_URL=redis://localhost:6379\nAPI_KEY=your-api-key-here\nPORT=3000\n</code></pre>\n<h2>[待替换] Usage</h2>\n<h3>[待替换] Dashboard</h3>\n<p>[待替换] The main dashboard provides an overview of global COVID-19 statistics:</p>\n<ul>\n<li>[待替换] Total cases, deaths, and recoveries</li>\n<li>[待替换] Active cases and critical cases</li>\n<li>[待替换] Daily new cases and deaths</li>\n<li>[待替换] Recovery and mortality rates</li>\n</ul>\n<h3>[待替换] Country View</h3>\n<p>[待替换] Select any country to view detailed statistics:</p>\n<ul>\n<li>[待替换] Country-specific data</li>\n<li>[待替换] Historical trends</li>\n<li>[待替换] Comparison with other countries</li>\n<li>[待替换] Regional breakdown (if available)</li>\n</ul>\n<h3>[待替换] Charts and Graphs</h3>\n<p>[待替换] Interactive visualizations help understand the data:</p>\n<ul>\n<li>[待替换] Hover for detailed information</li>\n<li>[待替换] Zoom and pan for detailed analysis</li>\n<li>[待替换] Toggle between different metrics</li>\n<li>[待替换] Export charts as images</li>\n</ul>\n<h2>[待替换] API Endpoints</h2>\n<h3>[待替换] Data Endpoints</h3>\n<pre><code>GET /api/global          # Global statistics\nGET /api/countries       # All countries data\nGET /api/country/:name   # Specific country data\nGET /api/historical      # Historical data\n</code></pre>\n<h3>[待替换] Analytics Endpoints</h3>\n<pre><code>GET /api/growth-rates    # Growth rate calculations\nGET /api/comparisons    # Country comparisons\nGET /api/predictions    # Trend predictions\n</code></pre>\n<h2>[待替换] Performance Optimizations</h2>\n<h3>[待替换] Caching Strategy</h3>\n<ul>\n<li>[待替换] <strong>Redis Caching</strong>: Cache API responses for 1 hour</li>\n<li>[待替换] <strong>Browser Caching</strong>: Leverage browser cache for static assets</li>\n<li>[待替换] <strong>CDN</strong>: Use Content Delivery Network for global performance</li>\n<li>[待替换] <strong>Compression</strong>: Gzip compression for API responses</li>\n</ul>\n<h3>[待替换] Data Optimization</h3>\n<ul>\n<li>[待替换] <strong>Pagination</strong>: Load data in chunks</li>\n<li>[待替换] <strong>Lazy Loading</strong>: Load charts only when needed</li>\n<li>[待替换] <strong>Debouncing</strong>: Limit API calls during user input</li>\n<li>[待替换] <strong>Memoization</strong>: Cache expensive calculations</li>\n</ul>\n<h2>[待替换] Testing</h2>\n<h3>[待替换] Unit Tests</h3>\n<pre><code class=\"language-bash\">npm run test\n</code></pre>\n<h3>[待替换] Integration Tests</h3>\n<pre><code class=\"language-bash\">npm run test:integration\n</code></pre>\n<h3>[待替换] E2E Tests</h3>\n<pre><code class=\"language-bash\">npm run test:e2e\n</code></pre>\n<h2>[待替换] Deployment</h2>\n<h3>[待替换] Production Build</h3>\n<pre><code class=\"language-bash\">npm run build\nnpm start\n</code></pre>\n<h3>[待替换] Docker Deployment</h3>\n<pre><code class=\"language-bash\">docker build -t covid-tracker .\ndocker run -p 3000:3000 covid-tracker\n</code></pre>\n<h3>[待替换] Environment Setup</h3>\n<ul>\n<li>[待替换] <strong>Database</strong>: Set up MongoDB cluster</li>\n<li>[待替换] <strong>Cache</strong>: Configure Redis instance</li>\n<li>[待替换] <strong>Monitoring</strong>: Set up application monitoring</li>\n<li>[待替换] <strong>Backup</strong>: Implement data backup strategy</li>\n</ul>\n<h2>[待替换] Contributing</h2>\n<h3>[待替换] Development Setup</h3>\n<ol>\n<li>[待替换] Fork the repository</li>\n<li>[待替换] Create a feature branch</li>\n<li>[待替换] Make your changes</li>\n<li>[待替换] Add tests for new features</li>\n<li>[待替换] Submit a pull request</li>\n</ol>\n<h3>[待替换] Code Style</h3>\n<ul>\n<li>[待替换] Use TypeScript for type safety</li>\n<li>[待替换] Follow ESLint configuration</li>\n<li>[待替换] Write meaningful commit messages</li>\n<li>[待替换] Add JSDoc comments for functions</li>\n</ul>\n<h2>[待替换] License</h2>\n<p>[待替换] This project is licensed under the MIT License.</p>\n<h2>[待替换] Acknowledgments</h2>\n<ul>\n<li>[待替换] Johns Hopkins CSSE for data</li>\n<li>[待替换] Chart.js team for visualization library</li>\n<li>[待替换] React team for the framework</li>\n<li>[待替换] Open source community for inspiration</li>\n</ul>\n<hr>\n<p><em>[待替换] Stay informed, stay safe.</em></p>\n",
    "content_zh": "<h1>[待替换] COVID-19 Data Tracker</h1>\n<p>[待替换] A comprehensive COVID-19 data tracking application that provides real-time statistics, interactive visualizations, and detailed analysis of the pandemic's impact worldwide.</p>\n<h2>[待替换] Key Features</h2>\n<h3>[待替换] 📊 Real-time Data</h3>\n<ul>\n<li>[待替换] <strong>Live Statistics</strong>: Up-to-date COVID-19 data from reliable sources</li>\n<li>[待替换] <strong>Global Coverage</strong>: Data from 200+ countries and territories</li>\n<li>[待替换] <strong>Historical Trends</strong>: Track data changes over time</li>\n<li>[待替换] <strong>Automatic Updates</strong>: Data refreshes every hour</li>\n</ul>\n<h3>[待替换] 📈 Interactive Visualizations</h3>\n<ul>\n<li>[待替换] <strong>Line Charts</strong>: Track case trends over time</li>\n<li>[待替换] <strong>Bar Charts</strong>: Compare statistics between countries</li>\n<li>[待替换] <strong>Pie Charts</strong>: Visualize data distribution</li>\n<li>[待替换] <strong>Maps</strong>: Geographic representation of data</li>\n</ul>\n<h3>[待替换] 🔍 Advanced Analytics</h3>\n<ul>\n<li>[待替换] <strong>Growth Rates</strong>: Calculate daily/weekly growth percentages</li>\n<li>[待替换] <strong>Comparisons</strong>: Compare multiple countries side-by-side</li>\n<li>[待替换] <strong>Predictions</strong>: Basic trend forecasting</li>\n<li>[待替换] <strong>Export Data</strong>: Download data in CSV format</li>\n</ul>\n<h2>[待替换] Technical Stack</h2>\n<h3>[待替换] Frontend</h3>\n<ul>\n<li>[待替换] <strong>React 18</strong>: Modern React with hooks and concurrent features</li>\n<li>[待替换] <strong>TypeScript</strong>: Type-safe development</li>\n<li>[待替换] <strong>Chart.js</strong>: Interactive chart library</li>\n<li>[待替换] <strong>Tailwind CSS</strong>: Utility-first CSS framework</li>\n<li>[待替换] <strong>React Query</strong>: Data fetching and caching</li>\n</ul>\n<h3>[待替换] Backend</h3>\n<ul>\n<li>[待替换] <strong>Node.js</strong>: Server-side JavaScript runtime</li>\n<li>[待替换] <strong>Express</strong>: Web application framework</li>\n<li>[待替换] <strong>MongoDB</strong>: NoSQL database for data storage</li>\n<li>[待替换] <strong>Redis</strong>: Caching layer for improved performance</li>\n</ul>\n<h3>[待替换] Data Sources</h3>\n<ul>\n<li>[待替换] <strong>Johns Hopkins CSSE</strong>: Primary data source</li>\n<li>[待替换] <strong>WHO</strong>: World Health Organization data</li>\n<li>[待替换] <strong>Our World in Data</strong>: Additional statistics</li>\n<li>[待替换] <strong>News API</strong>: Related news articles</li>\n</ul>\n<h2>[待替换] Installation</h2>\n<h3>[待替换] Prerequisites</h3>\n<ul>\n<li>[待替换] Node.js 16+</li>\n<li>[待替换] MongoDB 4.4+</li>\n<li>[待替换] Redis 6+</li>\n</ul>\n<h3>[待替换] Setup</h3>\n<pre><code class=\"language-bash\"># Clone the repository\ngit clone https://github.com/mgiovani/covid-data-tracker.git\n\n# Install dependencies\nnpm install\n\n# Set up environment variables\ncp .env.example .env\n# Edit .env with your configuration\n\n# Start the development server\nnpm run dev\n</code></pre>\n<h3>[待替换] Environment Variables</h3>\n<pre><code class=\"language-env\">MONGODB_URI=mongodb://localhost:27017/covid-tracker\nREDIS_URL=redis://localhost:6379\nAPI_KEY=your-api-key-here\nPORT=3000\n</code></pre>\n<h2>[待替换] Usage</h2>\n<h3>[待替换] Dashboard</h3>\n<p>[待替换] The main dashboard provides an overview of global COVID-19 statistics:</p>\n<ul>\n<li>[待替换] Total cases, deaths, and recoveries</li>\n<li>[待替换] Active cases and critical cases</li>\n<li>[待替换] Daily new cases and deaths</li>\n<li>[待替换] Recovery and mortality rates</li>\n</ul>\n<h3>[待替换] Country View</h3>\n<p>[待替换] Select any country to view detailed statistics:</p>\n<ul>\n<li>[待替换] Country-specific data</li>\n<li>[待替换] Historical trends</li>\n<li>[待替换] Comparison with other countries</li>\n<li>[待替换] Regional breakdown (if available)</li>\n</ul>\n<h3>[待替换] Charts and Graphs</h3>\n<p>[待替换] Interactive visualizations help understand the data:</p>\n<ul>\n<li>[待替换] Hover for detailed information</li>\n<li>[待替换] Zoom and pan for detailed analysis</li>\n<li>[待替换] Toggle between different metrics</li>\n<li>[待替换] Export charts as images</li>\n</ul>\n<h2>[待替换] API Endpoints</h2>\n<h3>[待替换] Data Endpoints</h3>\n<pre><code>GET /api/global          # Global statistics\nGET /api/countries       # All countries data\nGET /api/country/:name   # Specific country data\nGET /api/historical      # Historical data\n</code></pre>\n<h3>[待替换] Analytics Endpoints</h3>\n<pre><code>GET /api/growth-rates    # Growth rate calculations\nGET /api/comparisons    # Country comparisons\nGET /api/predictions    # Trend predictions\n</code></pre>\n<h2>[待替换] Performance Optimizations</h2>\n<h3>[待替换] Caching Strategy</h3>\n<ul>\n<li>[待替换] <strong>Redis Caching</strong>: Cache API responses for 1 hour</li>\n<li>[待替换] <strong>Browser Caching</strong>: Leverage browser cache for static assets</li>\n<li>[待替换] <strong>CDN</strong>: Use Content Delivery Network for global performance</li>\n<li>[待替换] <strong>Compression</strong>: Gzip compression for API responses</li>\n</ul>\n<h3>[待替换] Data Optimization</h3>\n<ul>\n<li>[待替换] <strong>Pagination</strong>: Load data in chunks</li>\n<li>[待替换] <strong>Lazy Loading</strong>: Load charts only when needed</li>\n<li>[待替换] <strong>Debouncing</strong>: Limit API calls during user input</li>\n<li>[待替换] <strong>Memoization</strong>: Cache expensive calculations</li>\n</ul>\n<h2>[待替换] Testing</h2>\n<h3>[待替换] Unit Tests</h3>\n<pre><code class=\"language-bash\">npm run test\n</code></pre>\n<h3>[待替换] Integration Tests</h3>\n<pre><code class=\"language-bash\">npm run test:integration\n</code></pre>\n<h3>[待替换] E2E Tests</h3>\n<pre><code class=\"language-bash\">npm run test:e2e\n</code></pre>\n<h2>[待替换] Deployment</h2>\n<h3>[待替换] Production Build</h3>\n<pre><code class=\"language-bash\">npm run build\nnpm start\n</code></pre>\n<h3>[待替换] Docker Deployment</h3>\n<pre><code class=\"language-bash\">docker build -t covid-tracker .\ndocker run -p 3000:3000 covid-tracker\n</code></pre>\n<h3>[待替换] Environment Setup</h3>\n<ul>\n<li>[待替换] <strong>Database</strong>: Set up MongoDB cluster</li>\n<li>[待替换] <strong>Cache</strong>: Configure Redis instance</li>\n<li>[待替换] <strong>Monitoring</strong>: Set up application monitoring</li>\n<li>[待替换] <strong>Backup</strong>: Implement data backup strategy</li>\n</ul>\n<h2>[待替换] Contributing</h2>\n<h3>[待替换] Development Setup</h3>\n<ol>\n<li>[待替换] Fork the repository</li>\n<li>[待替换] Create a feature branch</li>\n<li>[待替换] Make your changes</li>\n<li>[待替换] Add tests for new features</li>\n<li>[待替换] Submit a pull request</li>\n</ol>\n<h3>[待替换] Code Style</h3>\n<ul>\n<li>[待替换] Use TypeScript for type safety</li>\n<li>[待替换] Follow ESLint configuration</li>\n<li>[待替换] Write meaningful commit messages</li>\n<li>[待替换] Add JSDoc comments for functions</li>\n</ul>\n<h2>[待替换] License</h2>\n<p>[待替换] This project is licensed under the MIT License.</p>\n<h2>[待替换] Acknowledgments</h2>\n<ul>\n<li>[待替换] Johns Hopkins CSSE for data</li>\n<li>[待替换] Chart.js team for visualization library</li>\n<li>[待替换] React team for the framework</li>\n<li>[待替换] Open source community for inspiration</li>\n</ul>\n<hr>\n<p><em>[待替换] Stay informed, stay safe.</em></p>\n"
  },
  {
    "id": 4,
    "title_en": "[待替换] MyInstants Discord Bot",
    "title_zh": "[待替换] MyInstants Discord 机器人",
    "description_en": "[待替换] A Discord bot that plays sound effects from MyInstants.com, with custom commands and server management features.",
    "description_zh": "[待替换] 一个 Discord 机器人，可以播放来自 MyInstants.com 的音效，具有自定义命令和服务器管理功能。",
    "image": "[待替换] https://camo.githubusercontent.com/1b6684c7c3ad58073423a154fa0709eb215c096fec5aa32b6a430240aaa7ce55/68747470733a2f2f692e696d6775722e636f6d2f733134694f54392e706e67",
    "tags_en": [
      "[待替换] Discord.js",
      "[待替换] Node.js",
      "[待替换] Bot",
      "[待替换] Audio"
    ],
    "tags_zh": [
      "[待替换] Discord.js",
      "[待替换] Node.js",
      "[待替换] 机器人",
      "[待替换] 音频"
    ],
    "github": "[待替换] https://github.com/mgiovani/myinstants-discord-bot",
    "demo": "[待替换] null",
    "content_en": "<h1>[待替换] MyInstants Discord Bot</h1>\n<p>[待替换] A feature-rich Discord bot that brings the fun of MyInstants.com sound effects directly to your Discord server. Play thousands of sound effects with simple commands and enjoy seamless audio integration.</p>\n<h2>[待替换] Key Features</h2>\n<h3>[待替换] 🎵 Sound Effects</h3>\n<ul>\n<li>[待替换] <strong>MyInstants Integration</strong>: Access thousands of sound effects</li>\n<li>[待替换] <strong>Quick Play</strong>: Play sounds with simple commands</li>\n<li>[待替换] <strong>Search Functionality</strong>: Find sounds by keywords</li>\n<li>[待替换] <strong>Favorites</strong>: Save frequently used sounds</li>\n</ul>\n<h3>[待替换] 🎮 Bot Commands</h3>\n<ul>\n<li>[待替换] <strong>Play Sound</strong>: <code>!play &#x3C;sound-name></code> - Play a sound effect</li>\n<li>[待替换] <strong>Search</strong>: <code>!search &#x3C;keyword></code> - Search for sounds</li>\n<li>[待替换] <strong>List</strong>: <code>!list</code> - Show available sounds</li>\n<li>[待替换] <strong>Help</strong>: <code>!help</code> - Display command help</li>\n</ul>\n<h3>[待替换] ⚙️ Server Management</h3>\n<ul>\n<li>[待替换] <strong>Role Management</strong>: Assign roles for bot control</li>\n<li>[待替换] <strong>Channel Restrictions</strong>: Limit bot to specific channels</li>\n<li>[待替换] <strong>Volume Control</strong>: Adjust audio volume</li>\n<li>[待替换] <strong>Queue System</strong>: Manage sound playback queue</li>\n</ul>\n<h2>[待替换] Technical Implementation</h2>\n<h3>[待替换] Core Technologies</h3>\n<ul>\n<li>[待替换] <strong>Discord.js</strong>: Discord API wrapper for Node.js</li>\n<li>[待替换] <strong>Node.js</strong>: JavaScript runtime environment</li>\n<li>[待替换] <strong>FFmpeg</strong>: Audio processing and conversion</li>\n<li>[待替换] <strong>SQLite</strong>: Local database for user preferences</li>\n</ul>\n<h3>[待替换] Architecture</h3>\n<pre><code>src/\n├── commands/          # Bot command handlers\n├── events/           # Discord event listeners\n├── services/         # External service integrations\n├── utils/            # Utility functions\n└── database/         # Database operations\n</code></pre>\n<h3>[待替换] Audio Processing</h3>\n<ul>\n<li>[待替换] <strong>Stream Processing</strong>: Real-time audio streaming</li>\n<li>[待替换] <strong>Format Conversion</strong>: Convert various audio formats</li>\n<li>[待替换] <strong>Quality Control</strong>: Maintain audio quality</li>\n<li>[待替换] <strong>Caching</strong>: Cache frequently used sounds</li>\n</ul>\n<h2>[待替换] Installation</h2>\n<h3>[待替换] Prerequisites</h3>\n<ul>\n<li>[待替换] Node.js 16+</li>\n<li>[待替换] FFmpeg installed on system</li>\n<li>[待替换] Discord Bot Token</li>\n<li>[待替换] Discord Server with Bot permissions</li>\n</ul>\n<h3>[待替换] Setup</h3>\n<pre><code class=\"language-bash\"># Clone the repository\ngit clone https://github.com/mgiovani/myinstants-discord-bot.git\n\n# Install dependencies\nnpm install\n\n# Install FFmpeg (Ubuntu/Debian)\nsudo apt update\nsudo apt install ffmpeg\n\n# Configure environment\ncp .env.example .env\n# Edit .env with your bot token\n</code></pre>\n<h3>[待替换] Environment Configuration</h3>\n<pre><code class=\"language-env\">DISCORD_TOKEN=your-bot-token-here\nCLIENT_ID=your-client-id\nGUILD_ID=your-guild-id\nDATABASE_URL=./database.sqlite\n</code></pre>\n<h3>[待替换] Bot Permissions</h3>\n<p>[待替换] The bot requires the following permissions:</p>\n<ul>\n<li>[待替换] <strong>Send Messages</strong>: To respond to commands</li>\n<li>[待替换] <strong>Connect</strong>: To join voice channels</li>\n<li>[待替换] <strong>Speak</strong>: To play audio</li>\n<li>[待替换] <strong>Use Slash Commands</strong>: For modern command interface</li>\n</ul>\n<h2>[待替换] Usage</h2>\n<h3>[待替换] Basic Commands</h3>\n<pre><code>!play airhorn          # Play airhorn sound\n!search laugh          # Search for laugh sounds\n!list                  # Show available sounds\n!help                  # Display help information\n</code></pre>\n<h3>[待替换] Advanced Features</h3>\n<pre><code>!volume 50             # Set volume to 50%\n!queue                 # Show current queue\n!skip                  # Skip current sound\n!stop                  # Stop all sounds\n</code></pre>\n<h3>[待替换] Admin Commands</h3>\n<pre><code>!setup                 # Initial bot setup\n!config                # Configure bot settings\n!ban &#x3C;user>            # Ban user from using bot\n!unban &#x3C;user>          # Unban user\n</code></pre>\n<h2>[待替换] Sound Management</h2>\n<h3>[待替换] Sound Categories</h3>\n<ul>\n<li>[待替换] <strong>Memes</strong>: Popular meme sounds</li>\n<li>[待替换] <strong>Gaming</strong>: Gaming-related sound effects</li>\n<li>[待替换] <strong>Music</strong>: Musical snippets and jingles</li>\n<li>[待替换] <strong>Nature</strong>: Natural sounds and ambience</li>\n<li>[待替换] <strong>Comedy</strong>: Funny and comedic sounds</li>\n</ul>\n<h3>[待替换] Custom Sounds</h3>\n<ul>\n<li>[待替换] <strong>Upload</strong>: Upload custom sound files</li>\n<li>[待替换] <strong>Convert</strong>: Automatic format conversion</li>\n<li>[待替换] <strong>Organize</strong>: Categorize custom sounds</li>\n<li>[待替换] <strong>Share</strong>: Share sounds with other servers</li>\n</ul>\n<h2>[待替换] Performance Optimization</h2>\n<h3>[待替换] Caching Strategy</h3>\n<ul>\n<li>[待替换] <strong>Sound Cache</strong>: Cache frequently used sounds</li>\n<li>[待替换] <strong>Database Cache</strong>: Cache user preferences</li>\n<li>[待替换] <strong>Memory Management</strong>: Efficient memory usage</li>\n<li>[待替换] <strong>Cleanup</strong>: Automatic cleanup of old files</li>\n</ul>\n<h3>[待替换] Audio Optimization</h3>\n<ul>\n<li>[待替换] <strong>Compression</strong>: Compress audio files</li>\n<li>[待替换] <strong>Streaming</strong>: Stream audio without downloading</li>\n<li>[待替换] <strong>Quality Control</strong>: Balance quality vs file size</li>\n<li>[待替换] <strong>Buffer Management</strong>: Optimize audio buffering</li>\n</ul>\n<h2>[待替换] Error Handling</h2>\n<h3>[待替换] Common Issues</h3>\n<ul>\n<li>[待替换] <strong>Connection Errors</strong>: Handle Discord API issues</li>\n<li>[待替换] <strong>Audio Errors</strong>: Manage audio playback failures</li>\n<li>[待替换] <strong>Permission Errors</strong>: Handle insufficient permissions</li>\n<li>[待替换] <strong>Rate Limiting</strong>: Respect Discord rate limits</li>\n</ul>\n<h3>[待替换] Logging System</h3>\n<ul>\n<li>[待替换] <strong>Error Logs</strong>: Detailed error logging</li>\n<li>[待替换] <strong>Usage Logs</strong>: Track command usage</li>\n<li>[待替换] <strong>Performance Logs</strong>: Monitor bot performance</li>\n<li>[待替换] <strong>Debug Mode</strong>: Enable debug logging</li>\n</ul>\n<h2>[待替换] Testing</h2>\n<h3>[待替换] Unit Tests</h3>\n<pre><code class=\"language-bash\">npm run test\n</code></pre>\n<h3>[待替换] Integration Tests</h3>\n<pre><code class=\"language-bash\">npm run test:integration\n</code></pre>\n<h3>[待替换] Manual Testing</h3>\n<ul>\n<li>[待替换] Test all commands in development server</li>\n<li>[待替换] Verify audio playback quality</li>\n<li>[待替换] Test error handling scenarios</li>\n<li>[待替换] Validate user permissions</li>\n</ul>\n<h2>[待替换] Deployment</h2>\n<h3>[待替换] Production Setup</h3>\n<pre><code class=\"language-bash\">npm run build\nnpm start\n</code></pre>\n<h3>[待替换] Docker Deployment</h3>\n<pre><code class=\"language-bash\">docker build -t myinstants-bot .\ndocker run -d --name bot myinstants-bot\n</code></pre>\n<h3>[待替换] Hosting Options</h3>\n<ul>\n<li>[待替换] <strong>VPS</strong>: Virtual Private Server</li>\n<li>[待替换] <strong>Cloud</strong>: AWS, Google Cloud, Azure</li>\n<li>[待替换] <strong>Heroku</strong>: Platform as a Service</li>\n<li>[待替换] <strong>Railway</strong>: Modern deployment platform</li>\n</ul>\n<h2>[待替换] Contributing</h2>\n<h3>[待替换] Development Setup</h3>\n<ol>\n<li>[待替换] Fork the repository</li>\n<li>[待替换] Create a feature branch</li>\n<li>[待替换] Make your changes</li>\n<li>[待替换] Add tests for new features</li>\n<li>[待替换] Submit a pull request</li>\n</ol>\n<h3>[待替换] Code Guidelines</h3>\n<ul>\n<li>[待替换] Follow ESLint configuration</li>\n<li>[待替换] Write meaningful commit messages</li>\n<li>[待替换] Add JSDoc comments</li>\n<li>[待替换] Test all new features</li>\n</ul>\n<h2>[待替换] License</h2>\n<p>[待替换] This project is licensed under the MIT License.</p>\n<h2>[待替换] Acknowledgments</h2>\n<ul>\n<li>[待替换] Discord.js team for the excellent library</li>\n<li>[待替换] MyInstants.com for sound effects</li>\n<li>[待替换] Discord community for feedback</li>\n<li>[待替换] Open source contributors</li>\n</ul>\n<hr>\n<p><em>[待替换] Bring the fun to your Discord server!</em></p>\n",
    "content_zh": "<h1>[待替换] MyInstants Discord Bot</h1>\n<p>[待替换] A feature-rich Discord bot that brings the fun of MyInstants.com sound effects directly to your Discord server. Play thousands of sound effects with simple commands and enjoy seamless audio integration.</p>\n<h2>[待替换] Key Features</h2>\n<h3>[待替换] 🎵 Sound Effects</h3>\n<ul>\n<li>[待替换] <strong>MyInstants Integration</strong>: Access thousands of sound effects</li>\n<li>[待替换] <strong>Quick Play</strong>: Play sounds with simple commands</li>\n<li>[待替换] <strong>Search Functionality</strong>: Find sounds by keywords</li>\n<li>[待替换] <strong>Favorites</strong>: Save frequently used sounds</li>\n</ul>\n<h3>[待替换] 🎮 Bot Commands</h3>\n<ul>\n<li>[待替换] <strong>Play Sound</strong>: <code>!play &#x3C;sound-name></code> - Play a sound effect</li>\n<li>[待替换] <strong>Search</strong>: <code>!search &#x3C;keyword></code> - Search for sounds</li>\n<li>[待替换] <strong>List</strong>: <code>!list</code> - Show available sounds</li>\n<li>[待替换] <strong>Help</strong>: <code>!help</code> - Display command help</li>\n</ul>\n<h3>[待替换] ⚙️ Server Management</h3>\n<ul>\n<li>[待替换] <strong>Role Management</strong>: Assign roles for bot control</li>\n<li>[待替换] <strong>Channel Restrictions</strong>: Limit bot to specific channels</li>\n<li>[待替换] <strong>Volume Control</strong>: Adjust audio volume</li>\n<li>[待替换] <strong>Queue System</strong>: Manage sound playback queue</li>\n</ul>\n<h2>[待替换] Technical Implementation</h2>\n<h3>[待替换] Core Technologies</h3>\n<ul>\n<li>[待替换] <strong>Discord.js</strong>: Discord API wrapper for Node.js</li>\n<li>[待替换] <strong>Node.js</strong>: JavaScript runtime environment</li>\n<li>[待替换] <strong>FFmpeg</strong>: Audio processing and conversion</li>\n<li>[待替换] <strong>SQLite</strong>: Local database for user preferences</li>\n</ul>\n<h3>[待替换] Architecture</h3>\n<pre><code>src/\n├── commands/          # Bot command handlers\n├── events/           # Discord event listeners\n├── services/         # External service integrations\n├── utils/            # Utility functions\n└── database/         # Database operations\n</code></pre>\n<h3>[待替换] Audio Processing</h3>\n<ul>\n<li>[待替换] <strong>Stream Processing</strong>: Real-time audio streaming</li>\n<li>[待替换] <strong>Format Conversion</strong>: Convert various audio formats</li>\n<li>[待替换] <strong>Quality Control</strong>: Maintain audio quality</li>\n<li>[待替换] <strong>Caching</strong>: Cache frequently used sounds</li>\n</ul>\n<h2>[待替换] Installation</h2>\n<h3>[待替换] Prerequisites</h3>\n<ul>\n<li>[待替换] Node.js 16+</li>\n<li>[待替换] FFmpeg installed on system</li>\n<li>[待替换] Discord Bot Token</li>\n<li>[待替换] Discord Server with Bot permissions</li>\n</ul>\n<h3>[待替换] Setup</h3>\n<pre><code class=\"language-bash\"># Clone the repository\ngit clone https://github.com/mgiovani/myinstants-discord-bot.git\n\n# Install dependencies\nnpm install\n\n# Install FFmpeg (Ubuntu/Debian)\nsudo apt update\nsudo apt install ffmpeg\n\n# Configure environment\ncp .env.example .env\n# Edit .env with your bot token\n</code></pre>\n<h3>[待替换] Environment Configuration</h3>\n<pre><code class=\"language-env\">DISCORD_TOKEN=your-bot-token-here\nCLIENT_ID=your-client-id\nGUILD_ID=your-guild-id\nDATABASE_URL=./database.sqlite\n</code></pre>\n<h3>[待替换] Bot Permissions</h3>\n<p>[待替换] The bot requires the following permissions:</p>\n<ul>\n<li>[待替换] <strong>Send Messages</strong>: To respond to commands</li>\n<li>[待替换] <strong>Connect</strong>: To join voice channels</li>\n<li>[待替换] <strong>Speak</strong>: To play audio</li>\n<li>[待替换] <strong>Use Slash Commands</strong>: For modern command interface</li>\n</ul>\n<h2>[待替换] Usage</h2>\n<h3>[待替换] Basic Commands</h3>\n<pre><code>!play airhorn          # Play airhorn sound\n!search laugh          # Search for laugh sounds\n!list                  # Show available sounds\n!help                  # Display help information\n</code></pre>\n<h3>[待替换] Advanced Features</h3>\n<pre><code>!volume 50             # Set volume to 50%\n!queue                 # Show current queue\n!skip                  # Skip current sound\n!stop                  # Stop all sounds\n</code></pre>\n<h3>[待替换] Admin Commands</h3>\n<pre><code>!setup                 # Initial bot setup\n!config                # Configure bot settings\n!ban &#x3C;user>            # Ban user from using bot\n!unban &#x3C;user>          # Unban user\n</code></pre>\n<h2>[待替换] Sound Management</h2>\n<h3>[待替换] Sound Categories</h3>\n<ul>\n<li>[待替换] <strong>Memes</strong>: Popular meme sounds</li>\n<li>[待替换] <strong>Gaming</strong>: Gaming-related sound effects</li>\n<li>[待替换] <strong>Music</strong>: Musical snippets and jingles</li>\n<li>[待替换] <strong>Nature</strong>: Natural sounds and ambience</li>\n<li>[待替换] <strong>Comedy</strong>: Funny and comedic sounds</li>\n</ul>\n<h3>[待替换] Custom Sounds</h3>\n<ul>\n<li>[待替换] <strong>Upload</strong>: Upload custom sound files</li>\n<li>[待替换] <strong>Convert</strong>: Automatic format conversion</li>\n<li>[待替换] <strong>Organize</strong>: Categorize custom sounds</li>\n<li>[待替换] <strong>Share</strong>: Share sounds with other servers</li>\n</ul>\n<h2>[待替换] Performance Optimization</h2>\n<h3>[待替换] Caching Strategy</h3>\n<ul>\n<li>[待替换] <strong>Sound Cache</strong>: Cache frequently used sounds</li>\n<li>[待替换] <strong>Database Cache</strong>: Cache user preferences</li>\n<li>[待替换] <strong>Memory Management</strong>: Efficient memory usage</li>\n<li>[待替换] <strong>Cleanup</strong>: Automatic cleanup of old files</li>\n</ul>\n<h3>[待替换] Audio Optimization</h3>\n<ul>\n<li>[待替换] <strong>Compression</strong>: Compress audio files</li>\n<li>[待替换] <strong>Streaming</strong>: Stream audio without downloading</li>\n<li>[待替换] <strong>Quality Control</strong>: Balance quality vs file size</li>\n<li>[待替换] <strong>Buffer Management</strong>: Optimize audio buffering</li>\n</ul>\n<h2>[待替换] Error Handling</h2>\n<h3>[待替换] Common Issues</h3>\n<ul>\n<li>[待替换] <strong>Connection Errors</strong>: Handle Discord API issues</li>\n<li>[待替换] <strong>Audio Errors</strong>: Manage audio playback failures</li>\n<li>[待替换] <strong>Permission Errors</strong>: Handle insufficient permissions</li>\n<li>[待替换] <strong>Rate Limiting</strong>: Respect Discord rate limits</li>\n</ul>\n<h3>[待替换] Logging System</h3>\n<ul>\n<li>[待替换] <strong>Error Logs</strong>: Detailed error logging</li>\n<li>[待替换] <strong>Usage Logs</strong>: Track command usage</li>\n<li>[待替换] <strong>Performance Logs</strong>: Monitor bot performance</li>\n<li>[待替换] <strong>Debug Mode</strong>: Enable debug logging</li>\n</ul>\n<h2>[待替换] Testing</h2>\n<h3>[待替换] Unit Tests</h3>\n<pre><code class=\"language-bash\">npm run test\n</code></pre>\n<h3>[待替换] Integration Tests</h3>\n<pre><code class=\"language-bash\">npm run test:integration\n</code></pre>\n<h3>[待替换] Manual Testing</h3>\n<ul>\n<li>[待替换] Test all commands in development server</li>\n<li>[待替换] Verify audio playback quality</li>\n<li>[待替换] Test error handling scenarios</li>\n<li>[待替换] Validate user permissions</li>\n</ul>\n<h2>[待替换] Deployment</h2>\n<h3>[待替换] Production Setup</h3>\n<pre><code class=\"language-bash\">npm run build\nnpm start\n</code></pre>\n<h3>[待替换] Docker Deployment</h3>\n<pre><code class=\"language-bash\">docker build -t myinstants-bot .\ndocker run -d --name bot myinstants-bot\n</code></pre>\n<h3>[待替换] Hosting Options</h3>\n<ul>\n<li>[待替换] <strong>VPS</strong>: Virtual Private Server</li>\n<li>[待替换] <strong>Cloud</strong>: AWS, Google Cloud, Azure</li>\n<li>[待替换] <strong>Heroku</strong>: Platform as a Service</li>\n<li>[待替换] <strong>Railway</strong>: Modern deployment platform</li>\n</ul>\n<h2>[待替换] Contributing</h2>\n<h3>[待替换] Development Setup</h3>\n<ol>\n<li>[待替换] Fork the repository</li>\n<li>[待替换] Create a feature branch</li>\n<li>[待替换] Make your changes</li>\n<li>[待替换] Add tests for new features</li>\n<li>[待替换] Submit a pull request</li>\n</ol>\n<h3>[待替换] Code Guidelines</h3>\n<ul>\n<li>[待替换] Follow ESLint configuration</li>\n<li>[待替换] Write meaningful commit messages</li>\n<li>[待替换] Add JSDoc comments</li>\n<li>[待替换] Test all new features</li>\n</ul>\n<h2>[待替换] License</h2>\n<p>[待替换] This project is licensed under the MIT License.</p>\n<h2>[待替换] Acknowledgments</h2>\n<ul>\n<li>[待替换] Discord.js team for the excellent library</li>\n<li>[待替换] MyInstants.com for sound effects</li>\n<li>[待替换] Discord community for feedback</li>\n<li>[待替换] Open source contributors</li>\n</ul>\n<hr>\n<p><em>[待替换] Bring the fun to your Discord server!</em></p>\n"
  }
]

export function getProjectsData(lang: 'en' | 'zh') {
  const projects = allProjects.map(project => ({
    id: project.id,
    title: project[`title_${lang}`],
    description: project[`description_${lang}`],
    image: project.image,
    tags: project[`tags_${lang}`],
    github: project.github,
    demo: project.demo,
    content: project[`content_${lang}`],
  }))
  
  const featuredProjects = projects.slice(0, 3)
  return { projects, featuredProjects }
}
