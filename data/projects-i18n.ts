// This file is auto-generated. Do not edit manually.
// Run 'pnpm run build:content' to regenerate.

export type Project = {
  id: number
  title_en: string
  title_zh: string
  description_en: string
  description_zh: string
  image?: string | null
  tags_en: string[]
  tags_zh: string[]
  github: string
  demo: string | null
  content_en: string
  content_zh: string
}

const allProjects: Project[] = [
  {
    "id": 1,
    "title_en": "This is the first Project",
    "title_zh": "AI Cursor Init",
    "description_en": "The AI-powered documentation framework that lives inside your IDE. Generate Architecture Decision Records, system diagrams, and onboarding guides with simple slash commands.",
    "description_zh": "一个集成在 IDE 中的 AI 文档框架，通过斜杠命令生成 ADR、系统图与入门指南，保持文档与代码同步。",
    "image": "https://github.com/mgiovani/ai-cursor-init/raw/main/images/system-architecture-example.png",
    "tags_en": [
      "AI",
      "Documentation",
      "IDE",
      "Framework"
    ],
    "tags_zh": [
      "AI",
      "文档",
      "IDE",
      "框架"
    ],
    "github": "https://github.com/mgiovani/ai-cursor-init/",
    "demo": "https://github.com/mgiovani/ai-cursor-init/?tab=readme-ov-file#-visual-showcase",
    "content_en": "<h1>AI Cursor Init</h1>\n<p>AI Cursor Init is a revolutionary documentation framework designed to streamline the development process by integrating AI-powered documentation generation directly into your IDE. This project addresses the common challenge of maintaining up-to-date technical documentation in fast-paced development environments.</p>\n<h2>Key Features</h2>\n<h3>🚀 Slash Commands</h3>\n<p>Generate comprehensive documentation with simple slash commands:</p>\n<ul>\n<li><code>/adr</code> - Create Architecture Decision Records</li>\n<li><code>/diagram</code> - Generate system diagrams</li>\n<li><code>/onboard</code> - Create onboarding guides</li>\n<li><code>/api</code> - Generate API documentation</li>\n</ul>\n<h3>🤖 AI-Powered Generation</h3>\n<p>Leverages advanced AI models to:</p>\n<ul>\n<li>Understand code context and architecture</li>\n<li>Generate accurate technical documentation</li>\n<li>Maintain consistency across documentation</li>\n<li>Adapt to different project structures</li>\n</ul>\n<h3>📊 Visual System Diagrams</h3>\n<p>Automatically generate:</p>\n<ul>\n<li>System architecture diagrams</li>\n<li>Data flow diagrams</li>\n<li>Component relationship maps</li>\n<li>Deployment diagrams</li>\n</ul>\n<h2>Technical Implementation</h2>\n<h3>Core Technologies</h3>\n<ul>\n<li><strong>TypeScript</strong>: Primary development language</li>\n<li><strong>VS Code API</strong>: IDE integration</li>\n<li><strong>OpenAI GPT</strong>: AI model integration</li>\n<li><strong>Mermaid</strong>: Diagram generation</li>\n<li><strong>Markdown</strong>: Documentation format</li>\n</ul>\n<h3>Architecture</h3>\n<p>The framework follows a modular architecture with clear separation of concerns:</p>\n<pre><code>src/\n├── commands/          # Slash command handlers\n├── ai/               # AI integration layer\n├── generators/       # Documentation generators\n├── templates/        # Documentation templates\n└── utils/           # Utility functions\n</code></pre>\n<h2>Installation and Setup</h2>\n<h3>Prerequisites</h3>\n<ul>\n<li>VS Code or Cursor IDE</li>\n<li>Node.js 16+</li>\n<li>OpenAI API key</li>\n</ul>\n<h3>Installation</h3>\n<pre><code class=\"language-bash\"># Clone the repository\ngit clone https://github.com/mgiovani/ai-cursor-init.git\n\n# Install dependencies\nnpm install\n\n# Configure OpenAI API key\nexport OPENAI_API_KEY=\"your-api-key-here\"\n\n# Build the extension\nnpm run build\n</code></pre>\n<h3>Usage</h3>\n<ol>\n<li>Open your project in VS Code/Cursor</li>\n<li>Use slash commands in any file</li>\n<li>AI generates documentation based on your code</li>\n<li>Review and customize the generated content</li>\n</ol>\n<h2>Use Cases</h2>\n<h3>Architecture Decision Records (ADRs)</h3>\n<p>Document important architectural decisions with context and rationale:</p>\n<pre><code class=\"language-markdown\"># ADR-001: Database Selection\n\n## Status\nAccepted\n\n## Context\nWe need to choose a database for our new microservices architecture.\n\n## Decision\nWe will use PostgreSQL as our primary database.\n\n## Consequences\n- Positive: ACID compliance, JSON support, excellent performance\n- Negative: Requires more maintenance than NoSQL alternatives\n</code></pre>\n<h3>System Diagrams</h3>\n<p>Generate visual representations of your system architecture:</p>\n<pre><code class=\"language-mermaid\">graph TB\n    A[Client] --> B[API Gateway]\n    B --> C[User Service]\n    B --> D[Order Service]\n    B --> E[Payment Service]\n    C --> F[User Database]\n    D --> G[Order Database]\n    E --> H[Payment Database]\n</code></pre>\n<h3>Onboarding Guides</h3>\n<p>Create comprehensive guides for new team members:</p>\n<pre><code class=\"language-markdown\"># Project Onboarding Guide\n\n## Getting Started\n1. Clone the repository\n2. Install dependencies\n3. Set up environment variables\n4. Run the development server\n\n## Project Structure\n- `src/` - Source code\n- `docs/` - Documentation\n- `tests/` - Test files\n\n## Development Workflow\n1. Create feature branch\n2. Make changes\n3. Write tests\n4. Submit pull request\n</code></pre>\n<h2>Benefits</h2>\n<h3>For Developers</h3>\n<ul>\n<li><strong>Reduced Documentation Overhead</strong>: Generate docs with simple commands</li>\n<li><strong>Consistent Documentation</strong>: AI ensures consistent style and format</li>\n<li><strong>Time Savings</strong>: Focus on coding instead of writing documentation</li>\n<li><strong>Better Onboarding</strong>: New team members get comprehensive guides</li>\n</ul>\n<h3>For Teams</h3>\n<ul>\n<li><strong>Improved Knowledge Sharing</strong>: Better documentation leads to better collaboration</li>\n<li><strong>Reduced Context Switching</strong>: Stay in your IDE while generating docs</li>\n<li><strong>Standardized Processes</strong>: Consistent documentation across projects</li>\n<li><strong>Better Project Understanding</strong>: Visual diagrams help understand complex systems</li>\n</ul>\n<h2>Future Roadmap</h2>\n<h3>Planned Features</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Integration with more IDEs</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Custom template support</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Team collaboration features</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Documentation versioning</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Automated testing documentation</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Code comment generation</li>\n</ul>\n<h3>Community Contributions</h3>\n<p>We welcome contributions from the community! Areas where you can help:</p>\n<ul>\n<li>New slash commands</li>\n<li>Additional diagram types</li>\n<li>IDE integrations</li>\n<li>Documentation improvements</li>\n<li>Bug fixes and feature requests</li>\n</ul>\n<h2>Getting Involved</h2>\n<h3>Contributing</h3>\n<ol>\n<li>Fork the repository</li>\n<li>Create a feature branch</li>\n<li>Make your changes</li>\n<li>Add tests if applicable</li>\n<li>Submit a pull request</li>\n</ol>\n<h3>Reporting Issues</h3>\n<p>Found a bug or have a feature request? Please open an issue on GitHub with:</p>\n<ul>\n<li>Clear description of the problem</li>\n<li>Steps to reproduce</li>\n<li>Expected vs actual behavior</li>\n<li>Environment details</li>\n</ul>\n<h2>License</h2>\n<p>This project is licensed under the MIT License - see the <a href=\"LICENSE\">LICENSE</a> file for details.</p>\n<h2>Acknowledgments</h2>\n<ul>\n<li>OpenAI for providing the AI models</li>\n<li>VS Code team for the excellent extension API</li>\n<li>Mermaid team for diagram generation</li>\n<li>The open-source community for inspiration and feedback</li>\n</ul>\n<hr>\n<p><em>AI Cursor Init - Making documentation as easy as writing code.</em></p>\n",
    "content_zh": "<h1>AI Cursor Init</h1>\n<p>AI Cursor Init is a revolutionary documentation framework designed to streamline the development process by integrating AI-powered documentation generation directly into your IDE. This project addresses the common challenge of maintaining up-to-date technical documentation in fast-paced development environments.</p>\n<h2>Key Features</h2>\n<h3>🚀 Slash Commands</h3>\n<p>Generate comprehensive documentation with simple slash commands:</p>\n<ul>\n<li><code>/adr</code> - Create Architecture Decision Records</li>\n<li><code>/diagram</code> - Generate system diagrams</li>\n<li><code>/onboard</code> - Create onboarding guides</li>\n<li><code>/api</code> - Generate API documentation</li>\n</ul>\n<h3>🤖 AI-Powered Generation</h3>\n<p>Leverages advanced AI models to:</p>\n<ul>\n<li>Understand code context and architecture</li>\n<li>Generate accurate technical documentation</li>\n<li>Maintain consistency across documentation</li>\n<li>Adapt to different project structures</li>\n</ul>\n<h3>📊 Visual System Diagrams</h3>\n<p>Automatically generate:</p>\n<ul>\n<li>System architecture diagrams</li>\n<li>Data flow diagrams</li>\n<li>Component relationship maps</li>\n<li>Deployment diagrams</li>\n</ul>\n<h2>Technical Implementation</h2>\n<h3>Core Technologies</h3>\n<ul>\n<li><strong>TypeScript</strong>: Primary development language</li>\n<li><strong>VS Code API</strong>: IDE integration</li>\n<li><strong>OpenAI GPT</strong>: AI model integration</li>\n<li><strong>Mermaid</strong>: Diagram generation</li>\n<li><strong>Markdown</strong>: Documentation format</li>\n</ul>\n<h3>Architecture</h3>\n<p>The framework follows a modular architecture with clear separation of concerns:</p>\n<pre><code>src/\n├── commands/          # Slash command handlers\n├── ai/               # AI integration layer\n├── generators/       # Documentation generators\n├── templates/        # Documentation templates\n└── utils/           # Utility functions\n</code></pre>\n<h2>Installation and Setup</h2>\n<h3>Prerequisites</h3>\n<ul>\n<li>VS Code or Cursor IDE</li>\n<li>Node.js 16+</li>\n<li>OpenAI API key</li>\n</ul>\n<h3>Installation</h3>\n<pre><code class=\"language-bash\"># Clone the repository\ngit clone https://github.com/mgiovani/ai-cursor-init.git\n\n# Install dependencies\nnpm install\n\n# Configure OpenAI API key\nexport OPENAI_API_KEY=\"your-api-key-here\"\n\n# Build the extension\nnpm run build\n</code></pre>\n<h3>Usage</h3>\n<ol>\n<li>Open your project in VS Code/Cursor</li>\n<li>Use slash commands in any file</li>\n<li>AI generates documentation based on your code</li>\n<li>Review and customize the generated content</li>\n</ol>\n<h2>Use Cases</h2>\n<h3>Architecture Decision Records (ADRs)</h3>\n<p>Document important architectural decisions with context and rationale:</p>\n<pre><code class=\"language-markdown\"># ADR-001: Database Selection\n\n## Status\nAccepted\n\n## Context\nWe need to choose a database for our new microservices architecture.\n\n## Decision\nWe will use PostgreSQL as our primary database.\n\n## Consequences\n- Positive: ACID compliance, JSON support, excellent performance\n- Negative: Requires more maintenance than NoSQL alternatives\n</code></pre>\n<h3>System Diagrams</h3>\n<p>Generate visual representations of your system architecture:</p>\n<pre><code class=\"language-mermaid\">graph TB\n    A[Client] --> B[API Gateway]\n    B --> C[User Service]\n    B --> D[Order Service]\n    B --> E[Payment Service]\n    C --> F[User Database]\n    D --> G[Order Database]\n    E --> H[Payment Database]\n</code></pre>\n<h3>Onboarding Guides</h3>\n<p>Create comprehensive guides for new team members:</p>\n<pre><code class=\"language-markdown\"># Project Onboarding Guide\n\n## Getting Started\n1. Clone the repository\n2. Install dependencies\n3. Set up environment variables\n4. Run the development server\n\n## Project Structure\n- `src/` - Source code\n- `docs/` - Documentation\n- `tests/` - Test files\n\n## Development Workflow\n1. Create feature branch\n2. Make changes\n3. Write tests\n4. Submit pull request\n</code></pre>\n<h2>Benefits</h2>\n<h3>For Developers</h3>\n<ul>\n<li><strong>Reduced Documentation Overhead</strong>: Generate docs with simple commands</li>\n<li><strong>Consistent Documentation</strong>: AI ensures consistent style and format</li>\n<li><strong>Time Savings</strong>: Focus on coding instead of writing documentation</li>\n<li><strong>Better Onboarding</strong>: New team members get comprehensive guides</li>\n</ul>\n<h3>For Teams</h3>\n<ul>\n<li><strong>Improved Knowledge Sharing</strong>: Better documentation leads to better collaboration</li>\n<li><strong>Reduced Context Switching</strong>: Stay in your IDE while generating docs</li>\n<li><strong>Standardized Processes</strong>: Consistent documentation across projects</li>\n<li><strong>Better Project Understanding</strong>: Visual diagrams help understand complex systems</li>\n</ul>\n<h2>Future Roadmap</h2>\n<h3>Planned Features</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Integration with more IDEs</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Custom template support</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Team collaboration features</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Documentation versioning</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Automated testing documentation</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Code comment generation</li>\n</ul>\n<h3>Community Contributions</h3>\n<p>We welcome contributions from the community! Areas where you can help:</p>\n<ul>\n<li>New slash commands</li>\n<li>Additional diagram types</li>\n<li>IDE integrations</li>\n<li>Documentation improvements</li>\n<li>Bug fixes and feature requests</li>\n</ul>\n<h2>Getting Involved</h2>\n<h3>Contributing</h3>\n<ol>\n<li>Fork the repository</li>\n<li>Create a feature branch</li>\n<li>Make your changes</li>\n<li>Add tests if applicable</li>\n<li>Submit a pull request</li>\n</ol>\n<h3>Reporting Issues</h3>\n<p>Found a bug or have a feature request? Please open an issue on GitHub with:</p>\n<ul>\n<li>Clear description of the problem</li>\n<li>Steps to reproduce</li>\n<li>Expected vs actual behavior</li>\n<li>Environment details</li>\n</ul>\n<h2>License</h2>\n<p>This project is licensed under the MIT License - see the <a href=\"LICENSE\">LICENSE</a> file for details.</p>\n<h2>Acknowledgments</h2>\n<ul>\n<li>OpenAI for providing the AI models</li>\n<li>VS Code team for the excellent extension API</li>\n<li>Mermaid team for diagram generation</li>\n<li>The open-source community for inspiration and feedback</li>\n</ul>\n<hr>\n<p><em>AI Cursor Init - Making documentation as easy as writing code.</em></p>\n"
  },
  {
    "id": 2,
    "title_en": "Base 16 Whatsapp Theme",
    "title_zh": "Base 16 Whatsapp 主题",
    "description_en": "A Whatsapp Web theme inspired by the Dark Base 16 colors.",
    "description_zh": "受 Base 16 暗色配色启发的 WhatsApp Web 主题。",
    "image": "https://camo.githubusercontent.com/1b6684c7c3ad58073423a154fa0709eb215c096fec5aa32b6a430240aaa7ce55/68747470733a2f2f692e696d6775722e636f6d2f733134694f54392e706e67",
    "tags_en": [
      "CSS",
      "Javascript"
    ],
    "tags_zh": [
      "CSS",
      "Javascript"
    ],
    "github": "https://github.com/mgiovani/base16-whatsapp",
    "demo": null,
    "content_en": "<h1>Base 16 Whatsapp Theme</h1>\n<p>A beautifully crafted dark theme for WhatsApp Web that brings the elegance of Base 16 color schemes to your messaging experience. This theme transforms the standard WhatsApp Web interface into a visually appealing and eye-friendly dark mode using carefully selected colors from the Base 16 palette.</p>\n<h2>Features</h2>\n<h3>🎨 Base 16 Color Scheme</h3>\n<ul>\n<li><strong>Consistent Color Palette</strong>: Uses Base 16 dark color scheme for visual consistency</li>\n<li><strong>High Contrast</strong>: Optimized for readability and reduced eye strain</li>\n<li><strong>Professional Look</strong>: Clean, modern appearance suitable for work and personal use</li>\n</ul>\n<h3>🌙 Dark Mode Optimization</h3>\n<ul>\n<li><strong>Reduced Eye Strain</strong>: Dark background reduces eye fatigue during extended use</li>\n<li><strong>Better Night Usage</strong>: Perfect for late-night messaging sessions</li>\n<li><strong>Battery Friendly</strong>: Dark themes can help save battery on OLED displays</li>\n</ul>\n<h3>🎯 Customizable Elements</h3>\n<ul>\n<li><strong>Message Bubbles</strong>: Styled incoming and outgoing message bubbles</li>\n<li><strong>Sidebar</strong>: Dark themed navigation sidebar</li>\n<li><strong>Chat Area</strong>: Optimized chat background and text colors</li>\n<li><strong>Status Indicators</strong>: Custom styled online/offline indicators</li>\n</ul>\n<h2>Technical Implementation</h2>\n<h3>Core Technologies</h3>\n<ul>\n<li><strong>CSS3</strong>: Advanced styling with custom properties</li>\n<li><strong>JavaScript</strong>: Dynamic theme application and user preferences</li>\n<li><strong>Chrome Extension API</strong>: Browser extension integration</li>\n<li><strong>CSS Variables</strong>: Easy customization and theming</li>\n</ul>\n<h3>Architecture</h3>\n<p>The theme follows a modular CSS architecture:</p>\n<pre><code>src/\n├── css/\n│   ├── base.css          # Base styles and CSS variables\n│   ├── components/       # Component-specific styles\n│   │   ├── sidebar.css\n│   │   ├── chat.css\n│   │   └── messages.css\n│   └── themes/\n│       └── base16-dark.css\n├── js/\n│   ├── theme-loader.js   # Theme application logic\n│   └── preferences.js    # User preference management\n└── manifest.json         # Extension manifest\n</code></pre>\n<h3>CSS Variables System</h3>\n<pre><code class=\"language-css\">:root {\n  /* Base 16 Dark Colors */\n  --base00: #181818;  /* Background */\n  --base01: #282828;  /* Lighter background */\n  --base02: #383838;  /* Selection background */\n  --base03: #585858;  /* Comments */\n  --base04: #b8b8b8;  /* Dark foreground */\n  --base05: #d8d8d8;  /* Default foreground */\n  --base06: #e8e8e8;  /* Light foreground */\n  --base07: #f8f8f8;  /* Lightest foreground */\n  \n  /* Accent Colors */\n  --base08: #ab4642;  /* Red */\n  --base09: #dc9656;  /* Orange */\n  --base0A: #f7ca88;  /* Yellow */\n  --base0B: #a1b56c;  /* Green */\n  --base0C: #86c1b9;  /* Cyan */\n  --base0D: #7cafc2;  /* Blue */\n  --base0E: #ba8baf;  /* Magenta */\n  --base0F: #a16946;  /* Brown */\n}\n</code></pre>\n<h3>Component Styling</h3>\n<pre><code class=\"language-css\">/* Message Bubbles */\n.message-in {\n  background: var(--base01);\n  color: var(--base05);\n  border-radius: 8px;\n  padding: 8px 12px;\n  margin: 4px 0;\n}\n\n.message-out {\n  background: var(--base0D);\n  color: var(--base07);\n  border-radius: 8px;\n  padding: 8px 12px;\n  margin: 4px 0;\n  margin-left: auto;\n}\n\n/* Sidebar */\n.sidebar {\n  background: var(--base00);\n  border-right: 1px solid var(--base02);\n}\n\n.sidebar-header {\n  background: var(--base01);\n  border-bottom: 1px solid var(--base02);\n}\n\n/* Chat Area */\n.chat-area {\n  background: var(--base00);\n  color: var(--base05);\n}\n\n.chat-header {\n  background: var(--base01);\n  border-bottom: 1px solid var(--base02);\n}\n</code></pre>\n<h2>Installation</h2>\n<h3>Method 1: Browser Extension (Recommended)</h3>\n<ol>\n<li>\n<p><strong>Download the Extension</strong></p>\n<ul>\n<li>Download the latest release from GitHub</li>\n<li>Extract the files to a local directory</li>\n</ul>\n</li>\n<li>\n<p><strong>Install in Chrome/Edge</strong></p>\n<ul>\n<li>Open Chrome and go to <code>chrome://extensions/</code></li>\n<li>Enable \"Developer mode\"</li>\n<li>Click \"Load unpacked\" and select the extension folder</li>\n</ul>\n</li>\n<li>\n<p><strong>Install in Firefox</strong></p>\n<ul>\n<li>Open Firefox and go to <code>about:debugging</code></li>\n<li>Click \"This Firefox\"</li>\n<li>Click \"Load Temporary Add-on\"</li>\n<li>Select the <code>manifest.json</code> file</li>\n</ul>\n</li>\n</ol>\n<h3>Method 2: UserScript (Tampermonkey/Greasemonkey)</h3>\n<ol>\n<li>\n<p><strong>Install Tampermonkey</strong></p>\n<ul>\n<li>Install Tampermonkey browser extension</li>\n<li>Go to the <a href=\"https://github.com/mgiovani/base16-whatsapp\">UserScript page</a></li>\n</ul>\n</li>\n<li>\n<p><strong>Install the Script</strong></p>\n<ul>\n<li>Click \"Install\" on the UserScript page</li>\n<li>The script will automatically apply the theme</li>\n</ul>\n</li>\n</ol>\n<h3>Method 3: Manual CSS Injection</h3>\n<ol>\n<li>\n<p><strong>Open WhatsApp Web</strong></p>\n<ul>\n<li>Go to <a href=\"https://web.whatsapp.com\">web.whatsapp.com</a></li>\n</ul>\n</li>\n<li>\n<p><strong>Open Developer Tools</strong></p>\n<ul>\n<li>Press F12 or right-click and select \"Inspect\"</li>\n</ul>\n</li>\n<li>\n<p><strong>Inject CSS</strong></p>\n<ul>\n<li>Go to the Console tab</li>\n<li>Paste the CSS code from the repository</li>\n<li>Press Enter to apply</li>\n</ul>\n</li>\n</ol>\n<h2>Customization</h2>\n<h3>Color Customization</h3>\n<p>You can easily customize the theme by modifying CSS variables:</p>\n<pre><code class=\"language-css\">:root {\n  /* Change background color */\n  --base00: #1a1a1a;\n  \n  /* Change accent color */\n  --base0D: #6a9bd2;\n  \n  /* Change text color */\n  --base05: #e0e0e0;\n}\n</code></pre>\n<h3>Component Customization</h3>\n<p>Modify specific components by targeting their CSS classes:</p>\n<pre><code class=\"language-css\">/* Customize message bubbles */\n.message-in {\n  border-radius: 12px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n/* Customize sidebar */\n.sidebar {\n  width: 300px;\n  background: linear-gradient(180deg, var(--base00) 0%, var(--base01) 100%);\n}\n</code></pre>\n<h2>Browser Compatibility</h2>\n<h3>Supported Browsers</h3>\n<ul>\n<li><strong>Chrome</strong>: 80+</li>\n<li><strong>Firefox</strong>: 75+</li>\n<li><strong>Edge</strong>: 80+</li>\n<li><strong>Safari</strong>: 13+</li>\n<li><strong>Opera</strong>: 67+</li>\n</ul>\n<h3>Requirements</h3>\n<ul>\n<li>Modern browser with CSS Grid and Flexbox support</li>\n<li>JavaScript enabled</li>\n<li>WhatsApp Web access</li>\n</ul>\n<h2>Performance</h2>\n<h3>Optimization Features</h3>\n<ul>\n<li><strong>Minimal CSS</strong>: Lightweight stylesheet for fast loading</li>\n<li><strong>Efficient Selectors</strong>: Optimized CSS selectors for better performance</li>\n<li><strong>No JavaScript Dependencies</strong>: Pure CSS implementation</li>\n<li><strong>Lazy Loading</strong>: Components load only when needed</li>\n</ul>\n<h3>Resource Usage</h3>\n<ul>\n<li><strong>CSS Size</strong>: ~15KB minified</li>\n<li><strong>Memory Usage</strong>: Minimal impact on browser memory</li>\n<li><strong>CPU Usage</strong>: No JavaScript processing overhead</li>\n</ul>\n<h2>Troubleshooting</h2>\n<h3>Common Issues</h3>\n<h4>Theme Not Applying</h4>\n<ul>\n<li>Check if the extension is enabled</li>\n<li>Refresh the WhatsApp Web page</li>\n<li>Clear browser cache and cookies</li>\n<li>Check browser console for errors</li>\n</ul>\n<h4>Colors Not Displaying Correctly</h4>\n<ul>\n<li>Verify CSS variables are supported</li>\n<li>Check for conflicting styles</li>\n<li>Update browser to latest version</li>\n</ul>\n<h4>Extension Not Working</h4>\n<ul>\n<li>Check extension permissions</li>\n<li>Verify WhatsApp Web URL</li>\n<li>Reinstall the extension</li>\n</ul>\n<h3>Getting Help</h3>\n<ul>\n<li>Check the <a href=\"https://github.com/mgiovani/base16-whatsapp/issues\">Issues</a> page</li>\n<li>Join our <a href=\"https://discord.gg/your-server\">Discord community</a></li>\n<li>Read the <a href=\"https://github.com/mgiovani/base16-whatsapp/wiki/FAQ\">FAQ</a></li>\n</ul>\n<h2>Contributing</h2>\n<p>We welcome contributions from the community! Here's how you can help:</p>\n<h3>Development Setup</h3>\n<ol>\n<li>Fork the repository</li>\n<li>Clone your fork</li>\n<li>Make your changes</li>\n<li>Test in different browsers</li>\n<li>Submit a pull request</li>\n</ol>\n<h3>Areas for Contribution</h3>\n<ul>\n<li>New color schemes</li>\n<li>Additional browser support</li>\n<li>Performance improvements</li>\n<li>Bug fixes</li>\n<li>Documentation updates</li>\n</ul>\n<h2>License</h2>\n<p>This project is licensed under the MIT License - see the <a href=\"LICENSE\">LICENSE</a> file for details.</p>\n<h2>Acknowledgments</h2>\n<ul>\n<li>Base 16 color scheme creators</li>\n<li>WhatsApp Web team</li>\n<li>Browser extension communities</li>\n<li>All contributors and users</li>\n</ul>\n<hr>\n<p><em>Transform your WhatsApp Web experience with the elegance of Base 16 colors.</em></p>\n",
    "content_zh": "<h1>Base 16 Whatsapp Theme</h1>\n<p>A beautifully crafted dark theme for WhatsApp Web that brings the elegance of Base 16 color schemes to your messaging experience. This theme transforms the standard WhatsApp Web interface into a visually appealing and eye-friendly dark mode using carefully selected colors from the Base 16 palette.</p>\n<h2>Features</h2>\n<h3>🎨 Base 16 Color Scheme</h3>\n<ul>\n<li><strong>Consistent Color Palette</strong>: Uses Base 16 dark color scheme for visual consistency</li>\n<li><strong>High Contrast</strong>: Optimized for readability and reduced eye strain</li>\n<li><strong>Professional Look</strong>: Clean, modern appearance suitable for work and personal use</li>\n</ul>\n<h3>🌙 Dark Mode Optimization</h3>\n<ul>\n<li><strong>Reduced Eye Strain</strong>: Dark background reduces eye fatigue during extended use</li>\n<li><strong>Better Night Usage</strong>: Perfect for late-night messaging sessions</li>\n<li><strong>Battery Friendly</strong>: Dark themes can help save battery on OLED displays</li>\n</ul>\n<h3>🎯 Customizable Elements</h3>\n<ul>\n<li><strong>Message Bubbles</strong>: Styled incoming and outgoing message bubbles</li>\n<li><strong>Sidebar</strong>: Dark themed navigation sidebar</li>\n<li><strong>Chat Area</strong>: Optimized chat background and text colors</li>\n<li><strong>Status Indicators</strong>: Custom styled online/offline indicators</li>\n</ul>\n<h2>Technical Implementation</h2>\n<h3>Core Technologies</h3>\n<ul>\n<li><strong>CSS3</strong>: Advanced styling with custom properties</li>\n<li><strong>JavaScript</strong>: Dynamic theme application and user preferences</li>\n<li><strong>Chrome Extension API</strong>: Browser extension integration</li>\n<li><strong>CSS Variables</strong>: Easy customization and theming</li>\n</ul>\n<h3>Architecture</h3>\n<p>The theme follows a modular CSS architecture:</p>\n<pre><code>src/\n├── css/\n│   ├── base.css          # Base styles and CSS variables\n│   ├── components/       # Component-specific styles\n│   │   ├── sidebar.css\n│   │   ├── chat.css\n│   │   └── messages.css\n│   └── themes/\n│       └── base16-dark.css\n├── js/\n│   ├── theme-loader.js   # Theme application logic\n│   └── preferences.js    # User preference management\n└── manifest.json         # Extension manifest\n</code></pre>\n<h3>CSS Variables System</h3>\n<pre><code class=\"language-css\">:root {\n  /* Base 16 Dark Colors */\n  --base00: #181818;  /* Background */\n  --base01: #282828;  /* Lighter background */\n  --base02: #383838;  /* Selection background */\n  --base03: #585858;  /* Comments */\n  --base04: #b8b8b8;  /* Dark foreground */\n  --base05: #d8d8d8;  /* Default foreground */\n  --base06: #e8e8e8;  /* Light foreground */\n  --base07: #f8f8f8;  /* Lightest foreground */\n  \n  /* Accent Colors */\n  --base08: #ab4642;  /* Red */\n  --base09: #dc9656;  /* Orange */\n  --base0A: #f7ca88;  /* Yellow */\n  --base0B: #a1b56c;  /* Green */\n  --base0C: #86c1b9;  /* Cyan */\n  --base0D: #7cafc2;  /* Blue */\n  --base0E: #ba8baf;  /* Magenta */\n  --base0F: #a16946;  /* Brown */\n}\n</code></pre>\n<h3>Component Styling</h3>\n<pre><code class=\"language-css\">/* Message Bubbles */\n.message-in {\n  background: var(--base01);\n  color: var(--base05);\n  border-radius: 8px;\n  padding: 8px 12px;\n  margin: 4px 0;\n}\n\n.message-out {\n  background: var(--base0D);\n  color: var(--base07);\n  border-radius: 8px;\n  padding: 8px 12px;\n  margin: 4px 0;\n  margin-left: auto;\n}\n\n/* Sidebar */\n.sidebar {\n  background: var(--base00);\n  border-right: 1px solid var(--base02);\n}\n\n.sidebar-header {\n  background: var(--base01);\n  border-bottom: 1px solid var(--base02);\n}\n\n/* Chat Area */\n.chat-area {\n  background: var(--base00);\n  color: var(--base05);\n}\n\n.chat-header {\n  background: var(--base01);\n  border-bottom: 1px solid var(--base02);\n}\n</code></pre>\n<h2>Installation</h2>\n<h3>Method 1: Browser Extension (Recommended)</h3>\n<ol>\n<li>\n<p><strong>Download the Extension</strong></p>\n<ul>\n<li>Download the latest release from GitHub</li>\n<li>Extract the files to a local directory</li>\n</ul>\n</li>\n<li>\n<p><strong>Install in Chrome/Edge</strong></p>\n<ul>\n<li>Open Chrome and go to <code>chrome://extensions/</code></li>\n<li>Enable \"Developer mode\"</li>\n<li>Click \"Load unpacked\" and select the extension folder</li>\n</ul>\n</li>\n<li>\n<p><strong>Install in Firefox</strong></p>\n<ul>\n<li>Open Firefox and go to <code>about:debugging</code></li>\n<li>Click \"This Firefox\"</li>\n<li>Click \"Load Temporary Add-on\"</li>\n<li>Select the <code>manifest.json</code> file</li>\n</ul>\n</li>\n</ol>\n<h3>Method 2: UserScript (Tampermonkey/Greasemonkey)</h3>\n<ol>\n<li>\n<p><strong>Install Tampermonkey</strong></p>\n<ul>\n<li>Install Tampermonkey browser extension</li>\n<li>Go to the <a href=\"https://github.com/mgiovani/base16-whatsapp\">UserScript page</a></li>\n</ul>\n</li>\n<li>\n<p><strong>Install the Script</strong></p>\n<ul>\n<li>Click \"Install\" on the UserScript page</li>\n<li>The script will automatically apply the theme</li>\n</ul>\n</li>\n</ol>\n<h3>Method 3: Manual CSS Injection</h3>\n<ol>\n<li>\n<p><strong>Open WhatsApp Web</strong></p>\n<ul>\n<li>Go to <a href=\"https://web.whatsapp.com\">web.whatsapp.com</a></li>\n</ul>\n</li>\n<li>\n<p><strong>Open Developer Tools</strong></p>\n<ul>\n<li>Press F12 or right-click and select \"Inspect\"</li>\n</ul>\n</li>\n<li>\n<p><strong>Inject CSS</strong></p>\n<ul>\n<li>Go to the Console tab</li>\n<li>Paste the CSS code from the repository</li>\n<li>Press Enter to apply</li>\n</ul>\n</li>\n</ol>\n<h2>Customization</h2>\n<h3>Color Customization</h3>\n<p>You can easily customize the theme by modifying CSS variables:</p>\n<pre><code class=\"language-css\">:root {\n  /* Change background color */\n  --base00: #1a1a1a;\n  \n  /* Change accent color */\n  --base0D: #6a9bd2;\n  \n  /* Change text color */\n  --base05: #e0e0e0;\n}\n</code></pre>\n<h3>Component Customization</h3>\n<p>Modify specific components by targeting their CSS classes:</p>\n<pre><code class=\"language-css\">/* Customize message bubbles */\n.message-in {\n  border-radius: 12px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n/* Customize sidebar */\n.sidebar {\n  width: 300px;\n  background: linear-gradient(180deg, var(--base00) 0%, var(--base01) 100%);\n}\n</code></pre>\n<h2>Browser Compatibility</h2>\n<h3>Supported Browsers</h3>\n<ul>\n<li><strong>Chrome</strong>: 80+</li>\n<li><strong>Firefox</strong>: 75+</li>\n<li><strong>Edge</strong>: 80+</li>\n<li><strong>Safari</strong>: 13+</li>\n<li><strong>Opera</strong>: 67+</li>\n</ul>\n<h3>Requirements</h3>\n<ul>\n<li>Modern browser with CSS Grid and Flexbox support</li>\n<li>JavaScript enabled</li>\n<li>WhatsApp Web access</li>\n</ul>\n<h2>Performance</h2>\n<h3>Optimization Features</h3>\n<ul>\n<li><strong>Minimal CSS</strong>: Lightweight stylesheet for fast loading</li>\n<li><strong>Efficient Selectors</strong>: Optimized CSS selectors for better performance</li>\n<li><strong>No JavaScript Dependencies</strong>: Pure CSS implementation</li>\n<li><strong>Lazy Loading</strong>: Components load only when needed</li>\n</ul>\n<h3>Resource Usage</h3>\n<ul>\n<li><strong>CSS Size</strong>: ~15KB minified</li>\n<li><strong>Memory Usage</strong>: Minimal impact on browser memory</li>\n<li><strong>CPU Usage</strong>: No JavaScript processing overhead</li>\n</ul>\n<h2>Troubleshooting</h2>\n<h3>Common Issues</h3>\n<h4>Theme Not Applying</h4>\n<ul>\n<li>Check if the extension is enabled</li>\n<li>Refresh the WhatsApp Web page</li>\n<li>Clear browser cache and cookies</li>\n<li>Check browser console for errors</li>\n</ul>\n<h4>Colors Not Displaying Correctly</h4>\n<ul>\n<li>Verify CSS variables are supported</li>\n<li>Check for conflicting styles</li>\n<li>Update browser to latest version</li>\n</ul>\n<h4>Extension Not Working</h4>\n<ul>\n<li>Check extension permissions</li>\n<li>Verify WhatsApp Web URL</li>\n<li>Reinstall the extension</li>\n</ul>\n<h3>Getting Help</h3>\n<ul>\n<li>Check the <a href=\"https://github.com/mgiovani/base16-whatsapp/issues\">Issues</a> page</li>\n<li>Join our <a href=\"https://discord.gg/your-server\">Discord community</a></li>\n<li>Read the <a href=\"https://github.com/mgiovani/base16-whatsapp/wiki/FAQ\">FAQ</a></li>\n</ul>\n<h2>Contributing</h2>\n<p>We welcome contributions from the community! Here's how you can help:</p>\n<h3>Development Setup</h3>\n<ol>\n<li>Fork the repository</li>\n<li>Clone your fork</li>\n<li>Make your changes</li>\n<li>Test in different browsers</li>\n<li>Submit a pull request</li>\n</ol>\n<h3>Areas for Contribution</h3>\n<ul>\n<li>New color schemes</li>\n<li>Additional browser support</li>\n<li>Performance improvements</li>\n<li>Bug fixes</li>\n<li>Documentation updates</li>\n</ul>\n<h2>License</h2>\n<p>This project is licensed under the MIT License - see the <a href=\"LICENSE\">LICENSE</a> file for details.</p>\n<h2>Acknowledgments</h2>\n<ul>\n<li>Base 16 color scheme creators</li>\n<li>WhatsApp Web team</li>\n<li>Browser extension communities</li>\n<li>All contributors and users</li>\n</ul>\n<hr>\n<p><em>Transform your WhatsApp Web experience with the elegance of Base 16 colors.</em></p>\n"
  },
  {
    "id": 3,
    "title_en": "Covid Data Tracker",
    "title_zh": "新冠数据追踪器",
    "description_en": "API, OCR, and data extraction to track Covid cases in Montes Claros - Brazil.",
    "description_zh": "在巴西蒙特斯克拉罗斯市基于 API、OCR 与数据提取的 COVID-19 数据追踪系统。",
    "image": null,
    "tags_en": [
      "Python",
      "Go",
      "Docker"
    ],
    "tags_zh": [
      "Python",
      "Go",
      "Docker"
    ],
    "github": "https://github.com/mgiovani/mocorona",
    "demo": null,
    "content_en": "<h1>Covid Data Tracker</h1>\n<p>A comprehensive data tracking system designed to monitor and analyze COVID-19 cases in Montes Claros, Brazil. This project combines web scraping, OCR (Optical Character Recognition), and data processing to provide real-time insights into the pandemic's impact on the local community.</p>\n<h2>Features</h2>\n<h3>📊 Real-time Data Collection</h3>\n<ul>\n<li><strong>Automated Data Scraping</strong>: Collects data from official government sources</li>\n<li><strong>OCR Processing</strong>: Extracts data from images and PDFs using advanced OCR techniques</li>\n<li><strong>Data Validation</strong>: Ensures data accuracy and consistency</li>\n<li><strong>Real-time Updates</strong>: Provides up-to-date information on COVID-19 cases</li>\n</ul>\n<h3>🔍 Data Analysis</h3>\n<ul>\n<li><strong>Trend Analysis</strong>: Tracks case trends over time</li>\n<li><strong>Geographic Mapping</strong>: Visualizes data by location within the city</li>\n<li><strong>Statistical Reports</strong>: Generates comprehensive statistical reports</li>\n<li><strong>Predictive Modeling</strong>: Uses machine learning for case prediction</li>\n</ul>\n<h3>🌐 API and Web Interface</h3>\n<ul>\n<li><strong>RESTful API</strong>: Provides programmatic access to data</li>\n<li><strong>Web Dashboard</strong>: User-friendly interface for data visualization</li>\n<li><strong>Data Export</strong>: Export data in various formats (CSV, JSON, Excel)</li>\n<li><strong>Real-time Notifications</strong>: Alerts for significant changes in data</li>\n</ul>\n<h2>Technical Implementation</h2>\n<h3>Core Technologies</h3>\n<ul>\n<li><strong>Python 3.8+</strong>: Primary backend language</li>\n<li><strong>Go</strong>: High-performance data processing</li>\n<li><strong>Docker</strong>: Containerization and deployment</li>\n<li><strong>PostgreSQL</strong>: Data storage and management</li>\n<li><strong>Redis</strong>: Caching and session management</li>\n<li><strong>Celery</strong>: Asynchronous task processing</li>\n</ul>\n<h3>Architecture</h3>\n<p>The system follows a microservices architecture:</p>\n<pre><code>src/\n├── api/                 # REST API service\n├── scraper/            # Data collection service\n├── ocr/                # OCR processing service\n├── analyzer/           # Data analysis service\n├── web/                # Web dashboard\n├── shared/             # Shared utilities\n└── docker/             # Docker configurations\n</code></pre>\n<h3>Data Collection Pipeline</h3>\n<pre><code class=\"language-python\"># scraper/main.py\nimport asyncio\nimport aiohttp\nfrom bs4 import BeautifulSoup\nimport pytesseract\nfrom PIL import Image\nimport io\n\nclass CovidDataScraper:\n    def __init__(self):\n        self.session = None\n        self.ocr_engine = pytesseract\n    \n    async def scrape_official_sources(self):\n        \"\"\"Scrape data from official government websites\"\"\"\n        sources = [\n            \"https://www.montesclaros.mg.gov.br/covid19\",\n            \"https://www.saude.mg.gov.br/coronavirus\",\n            \"https://covid.saude.gov.br\"\n        ]\n        \n        for source in sources:\n            try:\n                data = await self._scrape_source(source)\n                await self._process_data(data)\n            except Exception as e:\n                print(f\"Error scraping {source}: {e}\")\n    \n    async def _scrape_source(self, url):\n        \"\"\"Scrape data from a specific source\"\"\"\n        async with self.session.get(url) as response:\n            content = await response.text()\n            soup = BeautifulSoup(content, 'html.parser')\n            \n            # Extract relevant data\n            cases_data = self._extract_cases_data(soup)\n            return cases_data\n    \n    def _extract_cases_data(self, soup):\n        \"\"\"Extract COVID-19 cases data from HTML\"\"\"\n        # Implementation for data extraction\n        pass\n</code></pre>\n<h3>OCR Processing</h3>\n<pre><code class=\"language-python\"># ocr/processor.py\nimport pytesseract\nfrom PIL import Image\nimport cv2\nimport numpy as np\n\nclass OCRProcessor:\n    def __init__(self):\n        self.tesseract_config = '--oem 3 --psm 6'\n    \n    def process_image(self, image_path):\n        \"\"\"Process image and extract text using OCR\"\"\"\n        # Load and preprocess image\n        image = cv2.imread(image_path)\n        processed_image = self._preprocess_image(image)\n        \n        # Extract text using Tesseract\n        text = pytesseract.image_to_string(\n            processed_image, \n            config=self.tesseract_config\n        )\n        \n        # Parse COVID-19 data from text\n        covid_data = self._parse_covid_data(text)\n        return covid_data\n    \n    def _preprocess_image(self, image):\n        \"\"\"Preprocess image for better OCR results\"\"\"\n        # Convert to grayscale\n        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n        \n        # Apply noise reduction\n        denoised = cv2.medianBlur(gray, 3)\n        \n        # Apply thresholding\n        _, thresh = cv2.threshold(denoised, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)\n        \n        return thresh\n    \n    def _parse_covid_data(self, text):\n        \"\"\"Parse COVID-19 data from OCR text\"\"\"\n        # Implementation for data parsing\n        pass\n</code></pre>\n<h3>Data Analysis</h3>\n<pre><code class=\"language-python\"># analyzer/trend_analyzer.py\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nimport matplotlib.pyplot as plt\n\nclass TrendAnalyzer:\n    def __init__(self, data_source):\n        self.data_source = data_source\n        self.df = None\n    \n    def load_data(self):\n        \"\"\"Load data from database\"\"\"\n        # Implementation for data loading\n        pass\n    \n    def analyze_trends(self):\n        \"\"\"Analyze COVID-19 case trends\"\"\"\n        if self.df is None:\n            self.load_data()\n        \n        # Calculate daily cases\n        daily_cases = self.df.groupby('date')['cases'].sum()\n        \n        # Calculate moving averages\n        daily_cases['7_day_avg'] = daily_cases.rolling(window=7).mean()\n        daily_cases['14_day_avg'] = daily_cases.rolling(window=14).mean()\n        \n        # Calculate growth rate\n        daily_cases['growth_rate'] = daily_cases['cases'].pct_change()\n        \n        return daily_cases\n    \n    def predict_future_cases(self, days_ahead=7):\n        \"\"\"Predict future cases using machine learning\"\"\"\n        if self.df is None:\n            self.load_data()\n        \n        # Prepare data for prediction\n        X = np.arange(len(self.df)).reshape(-1, 1)\n        y = self.df['cases'].values\n        \n        # Create polynomial features\n        poly_features = PolynomialFeatures(degree=2)\n        X_poly = poly_features.fit_transform(X)\n        \n        # Train model\n        model = LinearRegression()\n        model.fit(X_poly, y)\n        \n        # Make predictions\n        future_X = np.arange(len(self.df), len(self.df) + days_ahead).reshape(-1, 1)\n        future_X_poly = poly_features.transform(future_X)\n        predictions = model.predict(future_X_poly)\n        \n        return predictions\n</code></pre>\n<h3>API Implementation</h3>\n<pre><code class=\"language-python\"># api/main.py\nfrom fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\nfrom typing import List, Optional\nimport uvicorn\n\napp = FastAPI(title=\"COVID Data Tracker API\", version=\"1.0.0\")\n\nclass CovidData(BaseModel):\n    date: str\n    cases: int\n    deaths: int\n    recovered: int\n    active: int\n\nclass TrendData(BaseModel):\n    date: str\n    cases: int\n    growth_rate: float\n    moving_average: float\n\n@app.get(\"/api/cases\", response_model=List[CovidData])\nasync def get_cases(\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    limit: int = 100\n):\n    \"\"\"Get COVID-19 cases data\"\"\"\n    # Implementation for retrieving cases data\n    pass\n\n@app.get(\"/api/trends\", response_model=List[TrendData])\nasync def get_trends(days: int = 30):\n    \"\"\"Get COVID-19 trend analysis\"\"\"\n    # Implementation for trend analysis\n    pass\n\n@app.get(\"/api/predictions\")\nasync def get_predictions(days_ahead: int = 7):\n    \"\"\"Get COVID-19 case predictions\"\"\"\n    # Implementation for predictions\n    pass\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre>\n<h2>Installation and Setup</h2>\n<h3>Prerequisites</h3>\n<ul>\n<li>Python 3.8+</li>\n<li>Go 1.16+</li>\n<li>Docker and Docker Compose</li>\n<li>PostgreSQL 12+</li>\n<li>Redis 6+</li>\n</ul>\n<h3>Installation Steps</h3>\n<ol>\n<li><strong>Clone the repository</strong></li>\n</ol>\n<pre><code class=\"language-bash\">git clone https://github.com/mgiovani/mocorona.git\ncd mocorona\n</code></pre>\n<ol start=\"2\">\n<li><strong>Set up environment variables</strong></li>\n</ol>\n<pre><code class=\"language-bash\"># Create .env file\nDATABASE_URL=postgresql://user:password@localhost:5432/covid_tracker\nREDIS_URL=redis://localhost:6379\nOCR_API_KEY=your_ocr_api_key\nSCRAPING_INTERVAL=3600  # 1 hour\n</code></pre>\n<ol start=\"3\">\n<li><strong>Build and run with Docker</strong></li>\n</ol>\n<pre><code class=\"language-bash\">docker-compose up -d\n</code></pre>\n<ol start=\"4\">\n<li><strong>Run database migrations</strong></li>\n</ol>\n<pre><code class=\"language-bash\">python manage.py migrate\n</code></pre>\n<ol start=\"5\">\n<li><strong>Start the services</strong></li>\n</ol>\n<pre><code class=\"language-bash\"># Start data collection\npython scraper/main.py\n\n# Start API server\npython api/main.py\n\n# Start web dashboard\npython web/main.py\n</code></pre>\n<h2>Usage</h2>\n<h3>API Endpoints</h3>\n<h4>Get Cases Data</h4>\n<pre><code class=\"language-bash\">GET /api/cases?start_date=2023-01-01&#x26;end_date=2023-12-31\n</code></pre>\n<h4>Get Trend Analysis</h4>\n<pre><code class=\"language-bash\">GET /api/trends?days=30\n</code></pre>\n<h4>Get Predictions</h4>\n<pre><code class=\"language-bash\">GET /api/predictions?days_ahead=7\n</code></pre>\n<h3>Web Dashboard</h3>\n<p>Access the web dashboard at <code>http://localhost:3000</code> to:</p>\n<ul>\n<li>View real-time COVID-19 data</li>\n<li>Analyze trends and patterns</li>\n<li>Export data in various formats</li>\n<li>Set up alerts and notifications</li>\n</ul>\n<h2>Data Sources</h2>\n<h3>Official Sources</h3>\n<ul>\n<li><strong>Ministério da Saúde</strong>: Brazilian Ministry of Health</li>\n<li><strong>Secretaria de Saúde de MG</strong>: Minas Gerais State Health Department</li>\n<li><strong>Prefeitura de Montes Claros</strong>: Montes Claros City Hall</li>\n</ul>\n<h3>Data Types</h3>\n<ul>\n<li><strong>Daily Cases</strong>: New cases reported each day</li>\n<li><strong>Deaths</strong>: COVID-19 related deaths</li>\n<li><strong>Recovered</strong>: Number of recovered patients</li>\n<li><strong>Active Cases</strong>: Currently active cases</li>\n<li><strong>Hospitalizations</strong>: Hospital admission data</li>\n<li><strong>Vaccination</strong>: Vaccination progress</li>\n</ul>\n<h2>Performance and Scalability</h2>\n<h3>Optimization Features</h3>\n<ul>\n<li><strong>Asynchronous Processing</strong>: Non-blocking data collection</li>\n<li><strong>Caching</strong>: Redis-based caching for frequently accessed data</li>\n<li><strong>Database Indexing</strong>: Optimized database queries</li>\n<li><strong>Load Balancing</strong>: Horizontal scaling support</li>\n</ul>\n<h3>Monitoring</h3>\n<ul>\n<li><strong>Health Checks</strong>: Service health monitoring</li>\n<li><strong>Performance Metrics</strong>: Response time and throughput tracking</li>\n<li><strong>Error Logging</strong>: Comprehensive error tracking</li>\n<li><strong>Alerting</strong>: Automated alerts for system issues</li>\n</ul>\n<h2>Contributing</h2>\n<p>We welcome contributions from the community! Here's how you can help:</p>\n<h3>Development Setup</h3>\n<ol>\n<li>Fork the repository</li>\n<li>Create a feature branch</li>\n<li>Set up the development environment</li>\n<li>Make your changes</li>\n<li>Add tests if applicable</li>\n<li>Submit a pull request</li>\n</ol>\n<h3>Areas for Contribution</h3>\n<ul>\n<li>Additional data sources</li>\n<li>Improved OCR accuracy</li>\n<li>New analysis algorithms</li>\n<li>UI/UX improvements</li>\n<li>Performance optimizations</li>\n<li>Documentation updates</li>\n</ul>\n<h2>License</h2>\n<p>This project is licensed under the MIT License - see the <a href=\"LICENSE\">LICENSE</a> file for details.</p>\n<h2>Acknowledgments</h2>\n<ul>\n<li>Brazilian health authorities for providing data</li>\n<li>Open source community for tools and libraries</li>\n<li>Contributors and users who helped improve the system</li>\n<li>Healthcare workers and researchers fighting the pandemic</li>\n</ul>\n<hr>\n<p><em>Tracking COVID-19 data to help protect our community.</em></p>\n",
    "content_zh": "<h1>Covid Data Tracker</h1>\n<p>A comprehensive data tracking system designed to monitor and analyze COVID-19 cases in Montes Claros, Brazil. This project combines web scraping, OCR (Optical Character Recognition), and data processing to provide real-time insights into the pandemic's impact on the local community.</p>\n<h2>Features</h2>\n<h3>📊 Real-time Data Collection</h3>\n<ul>\n<li><strong>Automated Data Scraping</strong>: Collects data from official government sources</li>\n<li><strong>OCR Processing</strong>: Extracts data from images and PDFs using advanced OCR techniques</li>\n<li><strong>Data Validation</strong>: Ensures data accuracy and consistency</li>\n<li><strong>Real-time Updates</strong>: Provides up-to-date information on COVID-19 cases</li>\n</ul>\n<h3>🔍 Data Analysis</h3>\n<ul>\n<li><strong>Trend Analysis</strong>: Tracks case trends over time</li>\n<li><strong>Geographic Mapping</strong>: Visualizes data by location within the city</li>\n<li><strong>Statistical Reports</strong>: Generates comprehensive statistical reports</li>\n<li><strong>Predictive Modeling</strong>: Uses machine learning for case prediction</li>\n</ul>\n<h3>🌐 API and Web Interface</h3>\n<ul>\n<li><strong>RESTful API</strong>: Provides programmatic access to data</li>\n<li><strong>Web Dashboard</strong>: User-friendly interface for data visualization</li>\n<li><strong>Data Export</strong>: Export data in various formats (CSV, JSON, Excel)</li>\n<li><strong>Real-time Notifications</strong>: Alerts for significant changes in data</li>\n</ul>\n<h2>Technical Implementation</h2>\n<h3>Core Technologies</h3>\n<ul>\n<li><strong>Python 3.8+</strong>: Primary backend language</li>\n<li><strong>Go</strong>: High-performance data processing</li>\n<li><strong>Docker</strong>: Containerization and deployment</li>\n<li><strong>PostgreSQL</strong>: Data storage and management</li>\n<li><strong>Redis</strong>: Caching and session management</li>\n<li><strong>Celery</strong>: Asynchronous task processing</li>\n</ul>\n<h3>Architecture</h3>\n<p>The system follows a microservices architecture:</p>\n<pre><code>src/\n├── api/                 # REST API service\n├── scraper/            # Data collection service\n├── ocr/                # OCR processing service\n├── analyzer/           # Data analysis service\n├── web/                # Web dashboard\n├── shared/             # Shared utilities\n└── docker/             # Docker configurations\n</code></pre>\n<h3>Data Collection Pipeline</h3>\n<pre><code class=\"language-python\"># scraper/main.py\nimport asyncio\nimport aiohttp\nfrom bs4 import BeautifulSoup\nimport pytesseract\nfrom PIL import Image\nimport io\n\nclass CovidDataScraper:\n    def __init__(self):\n        self.session = None\n        self.ocr_engine = pytesseract\n    \n    async def scrape_official_sources(self):\n        \"\"\"Scrape data from official government websites\"\"\"\n        sources = [\n            \"https://www.montesclaros.mg.gov.br/covid19\",\n            \"https://www.saude.mg.gov.br/coronavirus\",\n            \"https://covid.saude.gov.br\"\n        ]\n        \n        for source in sources:\n            try:\n                data = await self._scrape_source(source)\n                await self._process_data(data)\n            except Exception as e:\n                print(f\"Error scraping {source}: {e}\")\n    \n    async def _scrape_source(self, url):\n        \"\"\"Scrape data from a specific source\"\"\"\n        async with self.session.get(url) as response:\n            content = await response.text()\n            soup = BeautifulSoup(content, 'html.parser')\n            \n            # Extract relevant data\n            cases_data = self._extract_cases_data(soup)\n            return cases_data\n    \n    def _extract_cases_data(self, soup):\n        \"\"\"Extract COVID-19 cases data from HTML\"\"\"\n        # Implementation for data extraction\n        pass\n</code></pre>\n<h3>OCR Processing</h3>\n<pre><code class=\"language-python\"># ocr/processor.py\nimport pytesseract\nfrom PIL import Image\nimport cv2\nimport numpy as np\n\nclass OCRProcessor:\n    def __init__(self):\n        self.tesseract_config = '--oem 3 --psm 6'\n    \n    def process_image(self, image_path):\n        \"\"\"Process image and extract text using OCR\"\"\"\n        # Load and preprocess image\n        image = cv2.imread(image_path)\n        processed_image = self._preprocess_image(image)\n        \n        # Extract text using Tesseract\n        text = pytesseract.image_to_string(\n            processed_image, \n            config=self.tesseract_config\n        )\n        \n        # Parse COVID-19 data from text\n        covid_data = self._parse_covid_data(text)\n        return covid_data\n    \n    def _preprocess_image(self, image):\n        \"\"\"Preprocess image for better OCR results\"\"\"\n        # Convert to grayscale\n        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n        \n        # Apply noise reduction\n        denoised = cv2.medianBlur(gray, 3)\n        \n        # Apply thresholding\n        _, thresh = cv2.threshold(denoised, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)\n        \n        return thresh\n    \n    def _parse_covid_data(self, text):\n        \"\"\"Parse COVID-19 data from OCR text\"\"\"\n        # Implementation for data parsing\n        pass\n</code></pre>\n<h3>Data Analysis</h3>\n<pre><code class=\"language-python\"># analyzer/trend_analyzer.py\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nimport matplotlib.pyplot as plt\n\nclass TrendAnalyzer:\n    def __init__(self, data_source):\n        self.data_source = data_source\n        self.df = None\n    \n    def load_data(self):\n        \"\"\"Load data from database\"\"\"\n        # Implementation for data loading\n        pass\n    \n    def analyze_trends(self):\n        \"\"\"Analyze COVID-19 case trends\"\"\"\n        if self.df is None:\n            self.load_data()\n        \n        # Calculate daily cases\n        daily_cases = self.df.groupby('date')['cases'].sum()\n        \n        # Calculate moving averages\n        daily_cases['7_day_avg'] = daily_cases.rolling(window=7).mean()\n        daily_cases['14_day_avg'] = daily_cases.rolling(window=14).mean()\n        \n        # Calculate growth rate\n        daily_cases['growth_rate'] = daily_cases['cases'].pct_change()\n        \n        return daily_cases\n    \n    def predict_future_cases(self, days_ahead=7):\n        \"\"\"Predict future cases using machine learning\"\"\"\n        if self.df is None:\n            self.load_data()\n        \n        # Prepare data for prediction\n        X = np.arange(len(self.df)).reshape(-1, 1)\n        y = self.df['cases'].values\n        \n        # Create polynomial features\n        poly_features = PolynomialFeatures(degree=2)\n        X_poly = poly_features.fit_transform(X)\n        \n        # Train model\n        model = LinearRegression()\n        model.fit(X_poly, y)\n        \n        # Make predictions\n        future_X = np.arange(len(self.df), len(self.df) + days_ahead).reshape(-1, 1)\n        future_X_poly = poly_features.transform(future_X)\n        predictions = model.predict(future_X_poly)\n        \n        return predictions\n</code></pre>\n<h3>API Implementation</h3>\n<pre><code class=\"language-python\"># api/main.py\nfrom fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\nfrom typing import List, Optional\nimport uvicorn\n\napp = FastAPI(title=\"COVID Data Tracker API\", version=\"1.0.0\")\n\nclass CovidData(BaseModel):\n    date: str\n    cases: int\n    deaths: int\n    recovered: int\n    active: int\n\nclass TrendData(BaseModel):\n    date: str\n    cases: int\n    growth_rate: float\n    moving_average: float\n\n@app.get(\"/api/cases\", response_model=List[CovidData])\nasync def get_cases(\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n    limit: int = 100\n):\n    \"\"\"Get COVID-19 cases data\"\"\"\n    # Implementation for retrieving cases data\n    pass\n\n@app.get(\"/api/trends\", response_model=List[TrendData])\nasync def get_trends(days: int = 30):\n    \"\"\"Get COVID-19 trend analysis\"\"\"\n    # Implementation for trend analysis\n    pass\n\n@app.get(\"/api/predictions\")\nasync def get_predictions(days_ahead: int = 7):\n    \"\"\"Get COVID-19 case predictions\"\"\"\n    # Implementation for predictions\n    pass\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre>\n<h2>Installation and Setup</h2>\n<h3>Prerequisites</h3>\n<ul>\n<li>Python 3.8+</li>\n<li>Go 1.16+</li>\n<li>Docker and Docker Compose</li>\n<li>PostgreSQL 12+</li>\n<li>Redis 6+</li>\n</ul>\n<h3>Installation Steps</h3>\n<ol>\n<li><strong>Clone the repository</strong></li>\n</ol>\n<pre><code class=\"language-bash\">git clone https://github.com/mgiovani/mocorona.git\ncd mocorona\n</code></pre>\n<ol start=\"2\">\n<li><strong>Set up environment variables</strong></li>\n</ol>\n<pre><code class=\"language-bash\"># Create .env file\nDATABASE_URL=postgresql://user:password@localhost:5432/covid_tracker\nREDIS_URL=redis://localhost:6379\nOCR_API_KEY=your_ocr_api_key\nSCRAPING_INTERVAL=3600  # 1 hour\n</code></pre>\n<ol start=\"3\">\n<li><strong>Build and run with Docker</strong></li>\n</ol>\n<pre><code class=\"language-bash\">docker-compose up -d\n</code></pre>\n<ol start=\"4\">\n<li><strong>Run database migrations</strong></li>\n</ol>\n<pre><code class=\"language-bash\">python manage.py migrate\n</code></pre>\n<ol start=\"5\">\n<li><strong>Start the services</strong></li>\n</ol>\n<pre><code class=\"language-bash\"># Start data collection\npython scraper/main.py\n\n# Start API server\npython api/main.py\n\n# Start web dashboard\npython web/main.py\n</code></pre>\n<h2>Usage</h2>\n<h3>API Endpoints</h3>\n<h4>Get Cases Data</h4>\n<pre><code class=\"language-bash\">GET /api/cases?start_date=2023-01-01&#x26;end_date=2023-12-31\n</code></pre>\n<h4>Get Trend Analysis</h4>\n<pre><code class=\"language-bash\">GET /api/trends?days=30\n</code></pre>\n<h4>Get Predictions</h4>\n<pre><code class=\"language-bash\">GET /api/predictions?days_ahead=7\n</code></pre>\n<h3>Web Dashboard</h3>\n<p>Access the web dashboard at <code>http://localhost:3000</code> to:</p>\n<ul>\n<li>View real-time COVID-19 data</li>\n<li>Analyze trends and patterns</li>\n<li>Export data in various formats</li>\n<li>Set up alerts and notifications</li>\n</ul>\n<h2>Data Sources</h2>\n<h3>Official Sources</h3>\n<ul>\n<li><strong>Ministério da Saúde</strong>: Brazilian Ministry of Health</li>\n<li><strong>Secretaria de Saúde de MG</strong>: Minas Gerais State Health Department</li>\n<li><strong>Prefeitura de Montes Claros</strong>: Montes Claros City Hall</li>\n</ul>\n<h3>Data Types</h3>\n<ul>\n<li><strong>Daily Cases</strong>: New cases reported each day</li>\n<li><strong>Deaths</strong>: COVID-19 related deaths</li>\n<li><strong>Recovered</strong>: Number of recovered patients</li>\n<li><strong>Active Cases</strong>: Currently active cases</li>\n<li><strong>Hospitalizations</strong>: Hospital admission data</li>\n<li><strong>Vaccination</strong>: Vaccination progress</li>\n</ul>\n<h2>Performance and Scalability</h2>\n<h3>Optimization Features</h3>\n<ul>\n<li><strong>Asynchronous Processing</strong>: Non-blocking data collection</li>\n<li><strong>Caching</strong>: Redis-based caching for frequently accessed data</li>\n<li><strong>Database Indexing</strong>: Optimized database queries</li>\n<li><strong>Load Balancing</strong>: Horizontal scaling support</li>\n</ul>\n<h3>Monitoring</h3>\n<ul>\n<li><strong>Health Checks</strong>: Service health monitoring</li>\n<li><strong>Performance Metrics</strong>: Response time and throughput tracking</li>\n<li><strong>Error Logging</strong>: Comprehensive error tracking</li>\n<li><strong>Alerting</strong>: Automated alerts for system issues</li>\n</ul>\n<h2>Contributing</h2>\n<p>We welcome contributions from the community! Here's how you can help:</p>\n<h3>Development Setup</h3>\n<ol>\n<li>Fork the repository</li>\n<li>Create a feature branch</li>\n<li>Set up the development environment</li>\n<li>Make your changes</li>\n<li>Add tests if applicable</li>\n<li>Submit a pull request</li>\n</ol>\n<h3>Areas for Contribution</h3>\n<ul>\n<li>Additional data sources</li>\n<li>Improved OCR accuracy</li>\n<li>New analysis algorithms</li>\n<li>UI/UX improvements</li>\n<li>Performance optimizations</li>\n<li>Documentation updates</li>\n</ul>\n<h2>License</h2>\n<p>This project is licensed under the MIT License - see the <a href=\"LICENSE\">LICENSE</a> file for details.</p>\n<h2>Acknowledgments</h2>\n<ul>\n<li>Brazilian health authorities for providing data</li>\n<li>Open source community for tools and libraries</li>\n<li>Contributors and users who helped improve the system</li>\n<li>Healthcare workers and researchers fighting the pandemic</li>\n</ul>\n<hr>\n<p><em>Tracking COVID-19 data to help protect our community.</em></p>\n"
  },
  {
    "id": 4,
    "title_en": "MyInstants Discord Bot",
    "title_zh": "MyInstants Discord 机器人",
    "description_en": "A discord bot to play MyInstants sounds to your friends.",
    "description_zh": "一个将 MyInstants 音效带入语音频道的 Discord 机器人。",
    "image": "https://camo.githubusercontent.com/4b1917eff3bda4e61188df670776876b702136fb1dfb9fcbd4bdb8d68189069d/68747470733a2f2f696d616765732d6e612e73736c2d696d616765732d616d617a6f6e2e636f6d2f696d616765732f492f36314c4e416f324b39524c2e706e67",
    "tags_en": [
      "Python",
      "Discord",
      "Bot"
    ],
    "tags_zh": [
      "Python",
      "Discord",
      "机器人"
    ],
    "github": "https://github.com/mgiovani/my-instants-discord-bot",
    "demo": "https://discord.com/oauth2/authorize?client_id=836019264124354571",
    "content_en": "<h1>MyInstants Discord Bot</h1>\n<p>A fun and interactive Discord bot that brings the joy of MyInstants sound effects to your Discord server. This bot allows users to play popular sound clips and memes directly in voice channels, creating an entertaining experience for your community.</p>\n<h2>Features</h2>\n<h3>🎵 Sound Playback</h3>\n<ul>\n<li>Play MyInstants sounds directly in Discord voice channels</li>\n<li>Queue multiple sounds for continuous playback</li>\n<li>High-quality audio streaming</li>\n<li>Support for various audio formats</li>\n</ul>\n<h3>🔍 Sound Search</h3>\n<ul>\n<li>Search for sounds by name or keywords</li>\n<li>Browse popular sounds by category</li>\n<li>Random sound selection</li>\n<li>Sound recommendations</li>\n</ul>\n<h3>🎮 Interactive Commands</h3>\n<ul>\n<li>Easy-to-use slash commands</li>\n<li>User-friendly interface</li>\n<li>Real-time feedback</li>\n<li>Error handling and validation</li>\n</ul>\n<h2>Technical Implementation</h2>\n<h3>Core Technologies</h3>\n<ul>\n<li><strong>Python 3.8+</strong>: Primary programming language</li>\n<li><strong>discord.py</strong>: Discord API wrapper</li>\n<li><strong>asyncio</strong>: Asynchronous programming</li>\n<li><strong>aiohttp</strong>: HTTP client for API requests</li>\n<li><strong>youtube-dl</strong>: Audio extraction and processing</li>\n</ul>\n<h3>Architecture</h3>\n<p>The bot follows a modular architecture with clear separation of concerns:</p>\n<pre><code>src/\n├── bot/              # Main bot logic\n├── commands/         # Command handlers\n├── services/         # External service integrations\n├── utils/            # Utility functions\n└── config/          # Configuration management\n</code></pre>\n<h3>Key Components</h3>\n<h4>Bot Core</h4>\n<pre><code class=\"language-python\">import discord\nfrom discord.ext import commands\n\nclass MyInstantsBot(commands.Bot):\n    def __init__(self):\n        intents = discord.Intents.default()\n        intents.message_content = True\n        intents.voice_states = True\n        \n        super().__init__(\n            command_prefix='!',\n            intents=intents,\n            help_command=None\n        )\n    \n    async def on_ready(self):\n        print(f'{self.user} has connected to Discord!')\n        await self.sync_commands()\n</code></pre>\n<h4>Sound Service</h4>\n<pre><code class=\"language-python\">import aiohttp\nimport asyncio\nfrom typing import List, Dict\n\nclass SoundService:\n    def __init__(self):\n        self.base_url = \"https://www.myinstants.com/api\"\n        self.session = None\n    \n    async def search_sounds(self, query: str) -> List[Dict]:\n        \"\"\"Search for sounds matching the query\"\"\"\n        async with self.session.get(\n            f\"{self.base_url}/search\",\n            params={\"q\": query}\n        ) as response:\n            return await response.json()\n    \n    async def get_sound_url(self, sound_id: str) -> str:\n        \"\"\"Get the direct URL for a sound file\"\"\"\n        async with self.session.get(\n            f\"{self.base_url}/sound/{sound_id}\"\n        ) as response:\n            data = await response.json()\n            return data.get(\"url\")\n</code></pre>\n<h4>Voice Management</h4>\n<pre><code class=\"language-python\">import discord\nfrom discord.ext import commands\n\nclass VoiceCommands(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n        self.voice_clients = {}\n    \n    @commands.slash_command(name=\"play\", description=\"Play a sound\")\n    async def play_sound(self, ctx, sound_name: str):\n        \"\"\"Play a sound in the user's voice channel\"\"\"\n        if not ctx.author.voice:\n            await ctx.respond(\"You need to be in a voice channel!\")\n            return\n        \n        voice_channel = ctx.author.voice.channel\n        \n        if ctx.guild.id not in self.voice_clients:\n            voice_client = await voice_channel.connect()\n            self.voice_clients[ctx.guild.id] = voice_client\n        else:\n            voice_client = self.voice_clients[ctx.guild.id]\n        \n        # Play the sound\n        await self._play_sound_file(voice_client, sound_name)\n        await ctx.respond(f\"Playing: {sound_name}\")\n</code></pre>\n<h2>Installation and Setup</h2>\n<h3>Prerequisites</h3>\n<ul>\n<li>Python 3.8 or higher</li>\n<li>Discord Bot Token</li>\n<li>MyInstants API access</li>\n</ul>\n<h3>Installation Steps</h3>\n<ol>\n<li><strong>Clone the repository</strong></li>\n</ol>\n<pre><code class=\"language-bash\">git clone https://github.com/mgiovani/my-instants-discord-bot.git\ncd my-instants-discord-bot\n</code></pre>\n<ol start=\"2\">\n<li><strong>Install dependencies</strong></li>\n</ol>\n<pre><code class=\"language-bash\">pip install -r requirements.txt\n</code></pre>\n<ol start=\"3\">\n<li><strong>Configure environment variables</strong></li>\n</ol>\n<pre><code class=\"language-bash\"># Create .env file\nDISCORD_TOKEN=your_discord_bot_token\nMYINSTANTS_API_KEY=your_api_key\n</code></pre>\n<ol start=\"4\">\n<li><strong>Run the bot</strong></li>\n</ol>\n<pre><code class=\"language-bash\">python main.py\n</code></pre>\n<h3>Discord Bot Setup</h3>\n<ol>\n<li>Go to <a href=\"https://discord.com/developers/applications\">Discord Developer Portal</a></li>\n<li>Create a new application</li>\n<li>Go to the \"Bot\" section</li>\n<li>Create a bot and copy the token</li>\n<li>Enable necessary intents (Message Content, Voice States)</li>\n<li>Invite the bot to your server with appropriate permissions</li>\n</ol>\n<h2>Usage</h2>\n<h3>Basic Commands</h3>\n<h4>Play a Sound</h4>\n<pre><code>/play sound_name\n</code></pre>\n<p>Plays the specified sound in your voice channel.</p>\n<h4>Search Sounds</h4>\n<pre><code>/search query\n</code></pre>\n<p>Searches for sounds matching your query.</p>\n<h4>List Popular Sounds</h4>\n<pre><code>/popular\n</code></pre>\n<p>Shows a list of popular sounds.</p>\n<h4>Stop Playback</h4>\n<pre><code>/stop\n</code></pre>\n<p>Stops the current sound and clears the queue.</p>\n<h3>Advanced Features</h3>\n<h4>Sound Queue</h4>\n<ul>\n<li>Add multiple sounds to a queue</li>\n<li>Automatic playback of queued sounds</li>\n<li>Queue management commands</li>\n</ul>\n<h4>Sound Categories</h4>\n<ul>\n<li>Browse sounds by category</li>\n<li>Filter by popularity or date</li>\n<li>Random sound selection</li>\n</ul>\n<h4>User Preferences</h4>\n<ul>\n<li>Save favorite sounds</li>\n<li>Custom sound collections</li>\n<li>Personal playlists</li>\n</ul>\n<h2>Configuration</h2>\n<h3>Bot Settings</h3>\n<pre><code class=\"language-python\"># config/settings.py\nBOT_SETTINGS = {\n    \"command_prefix\": \"!\",\n    \"max_queue_size\": 10,\n    \"max_sound_duration\": 300,  # 5 minutes\n    \"default_volume\": 0.5,\n    \"auto_disconnect_delay\": 300  # 5 minutes\n}\n</code></pre>\n<h3>Sound Settings</h3>\n<pre><code class=\"language-python\">SOUND_SETTINGS = {\n    \"supported_formats\": [\".mp3\", \".wav\", \".ogg\"],\n    \"max_file_size\": 10 * 1024 * 1024,  # 10MB\n    \"quality\": \"high\",\n    \"bitrate\": 128\n}\n</code></pre>\n<h2>Error Handling</h2>\n<p>The bot includes comprehensive error handling for various scenarios:</p>\n<ul>\n<li><strong>Voice Channel Issues</strong>: Handles cases where users aren't in voice channels</li>\n<li><strong>Network Errors</strong>: Manages API failures and timeouts</li>\n<li><strong>Audio Issues</strong>: Handles corrupted or unsupported audio files</li>\n<li><strong>Permission Errors</strong>: Manages Discord permission issues</li>\n<li><strong>Rate Limiting</strong>: Implements proper rate limiting for API calls</li>\n</ul>\n<h2>Performance Optimization</h2>\n<h3>Caching</h3>\n<ul>\n<li>Sound metadata caching</li>\n<li>User preference caching</li>\n<li>API response caching</li>\n</ul>\n<h3>Resource Management</h3>\n<ul>\n<li>Efficient memory usage</li>\n<li>Proper cleanup of voice connections</li>\n<li>Background task management</li>\n</ul>\n<h3>Monitoring</h3>\n<ul>\n<li>Performance metrics collection</li>\n<li>Error logging and reporting</li>\n<li>Usage statistics</li>\n</ul>\n<h2>Contributing</h2>\n<p>We welcome contributions from the community! Here's how you can help:</p>\n<h3>Development Setup</h3>\n<ol>\n<li>Fork the repository</li>\n<li>Create a feature branch</li>\n<li>Install development dependencies</li>\n<li>Make your changes</li>\n<li>Add tests if applicable</li>\n<li>Submit a pull request</li>\n</ol>\n<h3>Areas for Contribution</h3>\n<ul>\n<li>New sound sources</li>\n<li>Additional commands</li>\n<li>UI improvements</li>\n<li>Performance optimizations</li>\n<li>Documentation updates</li>\n<li>Bug fixes</li>\n</ul>\n<h2>Troubleshooting</h2>\n<h3>Common Issues</h3>\n<h4>Bot Not Responding</h4>\n<ul>\n<li>Check if the bot is online</li>\n<li>Verify bot permissions</li>\n<li>Check command syntax</li>\n</ul>\n<h4>Audio Not Playing</h4>\n<ul>\n<li>Ensure you're in a voice channel</li>\n<li>Check audio permissions</li>\n<li>Verify sound file availability</li>\n</ul>\n<h4>API Errors</h4>\n<ul>\n<li>Check API key configuration</li>\n<li>Verify network connectivity</li>\n<li>Check rate limiting</li>\n</ul>\n<h3>Getting Help</h3>\n<ul>\n<li>Check the <a href=\"https://github.com/mgiovani/my-instants-discord-bot/issues\">Issues</a> page</li>\n<li>Join our <a href=\"https://discord.gg/your-server\">Discord server</a></li>\n<li>Read the <a href=\"https://github.com/mgiovani/my-instants-discord-bot/wiki\">documentation</a></li>\n</ul>\n<h2>License</h2>\n<p>This project is licensed under the MIT License - see the <a href=\"LICENSE\">LICENSE</a> file for details.</p>\n<h2>Acknowledgments</h2>\n<ul>\n<li>Discord.py community for the excellent library</li>\n<li>MyInstants for providing the sound API</li>\n<li>All contributors and users who helped improve the bot</li>\n</ul>\n<hr>\n<p><em>Bring the fun of MyInstants to your Discord server!</em></p>\n",
    "content_zh": "<h1>MyInstants Discord Bot</h1>\n<p>A fun and interactive Discord bot that brings the joy of MyInstants sound effects to your Discord server. This bot allows users to play popular sound clips and memes directly in voice channels, creating an entertaining experience for your community.</p>\n<h2>Features</h2>\n<h3>🎵 Sound Playback</h3>\n<ul>\n<li>Play MyInstants sounds directly in Discord voice channels</li>\n<li>Queue multiple sounds for continuous playback</li>\n<li>High-quality audio streaming</li>\n<li>Support for various audio formats</li>\n</ul>\n<h3>🔍 Sound Search</h3>\n<ul>\n<li>Search for sounds by name or keywords</li>\n<li>Browse popular sounds by category</li>\n<li>Random sound selection</li>\n<li>Sound recommendations</li>\n</ul>\n<h3>🎮 Interactive Commands</h3>\n<ul>\n<li>Easy-to-use slash commands</li>\n<li>User-friendly interface</li>\n<li>Real-time feedback</li>\n<li>Error handling and validation</li>\n</ul>\n<h2>Technical Implementation</h2>\n<h3>Core Technologies</h3>\n<ul>\n<li><strong>Python 3.8+</strong>: Primary programming language</li>\n<li><strong>discord.py</strong>: Discord API wrapper</li>\n<li><strong>asyncio</strong>: Asynchronous programming</li>\n<li><strong>aiohttp</strong>: HTTP client for API requests</li>\n<li><strong>youtube-dl</strong>: Audio extraction and processing</li>\n</ul>\n<h3>Architecture</h3>\n<p>The bot follows a modular architecture with clear separation of concerns:</p>\n<pre><code>src/\n├── bot/              # Main bot logic\n├── commands/         # Command handlers\n├── services/         # External service integrations\n├── utils/            # Utility functions\n└── config/          # Configuration management\n</code></pre>\n<h3>Key Components</h3>\n<h4>Bot Core</h4>\n<pre><code class=\"language-python\">import discord\nfrom discord.ext import commands\n\nclass MyInstantsBot(commands.Bot):\n    def __init__(self):\n        intents = discord.Intents.default()\n        intents.message_content = True\n        intents.voice_states = True\n        \n        super().__init__(\n            command_prefix='!',\n            intents=intents,\n            help_command=None\n        )\n    \n    async def on_ready(self):\n        print(f'{self.user} has connected to Discord!')\n        await self.sync_commands()\n</code></pre>\n<h4>Sound Service</h4>\n<pre><code class=\"language-python\">import aiohttp\nimport asyncio\nfrom typing import List, Dict\n\nclass SoundService:\n    def __init__(self):\n        self.base_url = \"https://www.myinstants.com/api\"\n        self.session = None\n    \n    async def search_sounds(self, query: str) -> List[Dict]:\n        \"\"\"Search for sounds matching the query\"\"\"\n        async with self.session.get(\n            f\"{self.base_url}/search\",\n            params={\"q\": query}\n        ) as response:\n            return await response.json()\n    \n    async def get_sound_url(self, sound_id: str) -> str:\n        \"\"\"Get the direct URL for a sound file\"\"\"\n        async with self.session.get(\n            f\"{self.base_url}/sound/{sound_id}\"\n        ) as response:\n            data = await response.json()\n            return data.get(\"url\")\n</code></pre>\n<h4>Voice Management</h4>\n<pre><code class=\"language-python\">import discord\nfrom discord.ext import commands\n\nclass VoiceCommands(commands.Cog):\n    def __init__(self, bot):\n        self.bot = bot\n        self.voice_clients = {}\n    \n    @commands.slash_command(name=\"play\", description=\"Play a sound\")\n    async def play_sound(self, ctx, sound_name: str):\n        \"\"\"Play a sound in the user's voice channel\"\"\"\n        if not ctx.author.voice:\n            await ctx.respond(\"You need to be in a voice channel!\")\n            return\n        \n        voice_channel = ctx.author.voice.channel\n        \n        if ctx.guild.id not in self.voice_clients:\n            voice_client = await voice_channel.connect()\n            self.voice_clients[ctx.guild.id] = voice_client\n        else:\n            voice_client = self.voice_clients[ctx.guild.id]\n        \n        # Play the sound\n        await self._play_sound_file(voice_client, sound_name)\n        await ctx.respond(f\"Playing: {sound_name}\")\n</code></pre>\n<h2>Installation and Setup</h2>\n<h3>Prerequisites</h3>\n<ul>\n<li>Python 3.8 or higher</li>\n<li>Discord Bot Token</li>\n<li>MyInstants API access</li>\n</ul>\n<h3>Installation Steps</h3>\n<ol>\n<li><strong>Clone the repository</strong></li>\n</ol>\n<pre><code class=\"language-bash\">git clone https://github.com/mgiovani/my-instants-discord-bot.git\ncd my-instants-discord-bot\n</code></pre>\n<ol start=\"2\">\n<li><strong>Install dependencies</strong></li>\n</ol>\n<pre><code class=\"language-bash\">pip install -r requirements.txt\n</code></pre>\n<ol start=\"3\">\n<li><strong>Configure environment variables</strong></li>\n</ol>\n<pre><code class=\"language-bash\"># Create .env file\nDISCORD_TOKEN=your_discord_bot_token\nMYINSTANTS_API_KEY=your_api_key\n</code></pre>\n<ol start=\"4\">\n<li><strong>Run the bot</strong></li>\n</ol>\n<pre><code class=\"language-bash\">python main.py\n</code></pre>\n<h3>Discord Bot Setup</h3>\n<ol>\n<li>Go to <a href=\"https://discord.com/developers/applications\">Discord Developer Portal</a></li>\n<li>Create a new application</li>\n<li>Go to the \"Bot\" section</li>\n<li>Create a bot and copy the token</li>\n<li>Enable necessary intents (Message Content, Voice States)</li>\n<li>Invite the bot to your server with appropriate permissions</li>\n</ol>\n<h2>Usage</h2>\n<h3>Basic Commands</h3>\n<h4>Play a Sound</h4>\n<pre><code>/play sound_name\n</code></pre>\n<p>Plays the specified sound in your voice channel.</p>\n<h4>Search Sounds</h4>\n<pre><code>/search query\n</code></pre>\n<p>Searches for sounds matching your query.</p>\n<h4>List Popular Sounds</h4>\n<pre><code>/popular\n</code></pre>\n<p>Shows a list of popular sounds.</p>\n<h4>Stop Playback</h4>\n<pre><code>/stop\n</code></pre>\n<p>Stops the current sound and clears the queue.</p>\n<h3>Advanced Features</h3>\n<h4>Sound Queue</h4>\n<ul>\n<li>Add multiple sounds to a queue</li>\n<li>Automatic playback of queued sounds</li>\n<li>Queue management commands</li>\n</ul>\n<h4>Sound Categories</h4>\n<ul>\n<li>Browse sounds by category</li>\n<li>Filter by popularity or date</li>\n<li>Random sound selection</li>\n</ul>\n<h4>User Preferences</h4>\n<ul>\n<li>Save favorite sounds</li>\n<li>Custom sound collections</li>\n<li>Personal playlists</li>\n</ul>\n<h2>Configuration</h2>\n<h3>Bot Settings</h3>\n<pre><code class=\"language-python\"># config/settings.py\nBOT_SETTINGS = {\n    \"command_prefix\": \"!\",\n    \"max_queue_size\": 10,\n    \"max_sound_duration\": 300,  # 5 minutes\n    \"default_volume\": 0.5,\n    \"auto_disconnect_delay\": 300  # 5 minutes\n}\n</code></pre>\n<h3>Sound Settings</h3>\n<pre><code class=\"language-python\">SOUND_SETTINGS = {\n    \"supported_formats\": [\".mp3\", \".wav\", \".ogg\"],\n    \"max_file_size\": 10 * 1024 * 1024,  # 10MB\n    \"quality\": \"high\",\n    \"bitrate\": 128\n}\n</code></pre>\n<h2>Error Handling</h2>\n<p>The bot includes comprehensive error handling for various scenarios:</p>\n<ul>\n<li><strong>Voice Channel Issues</strong>: Handles cases where users aren't in voice channels</li>\n<li><strong>Network Errors</strong>: Manages API failures and timeouts</li>\n<li><strong>Audio Issues</strong>: Handles corrupted or unsupported audio files</li>\n<li><strong>Permission Errors</strong>: Manages Discord permission issues</li>\n<li><strong>Rate Limiting</strong>: Implements proper rate limiting for API calls</li>\n</ul>\n<h2>Performance Optimization</h2>\n<h3>Caching</h3>\n<ul>\n<li>Sound metadata caching</li>\n<li>User preference caching</li>\n<li>API response caching</li>\n</ul>\n<h3>Resource Management</h3>\n<ul>\n<li>Efficient memory usage</li>\n<li>Proper cleanup of voice connections</li>\n<li>Background task management</li>\n</ul>\n<h3>Monitoring</h3>\n<ul>\n<li>Performance metrics collection</li>\n<li>Error logging and reporting</li>\n<li>Usage statistics</li>\n</ul>\n<h2>Contributing</h2>\n<p>We welcome contributions from the community! Here's how you can help:</p>\n<h3>Development Setup</h3>\n<ol>\n<li>Fork the repository</li>\n<li>Create a feature branch</li>\n<li>Install development dependencies</li>\n<li>Make your changes</li>\n<li>Add tests if applicable</li>\n<li>Submit a pull request</li>\n</ol>\n<h3>Areas for Contribution</h3>\n<ul>\n<li>New sound sources</li>\n<li>Additional commands</li>\n<li>UI improvements</li>\n<li>Performance optimizations</li>\n<li>Documentation updates</li>\n<li>Bug fixes</li>\n</ul>\n<h2>Troubleshooting</h2>\n<h3>Common Issues</h3>\n<h4>Bot Not Responding</h4>\n<ul>\n<li>Check if the bot is online</li>\n<li>Verify bot permissions</li>\n<li>Check command syntax</li>\n</ul>\n<h4>Audio Not Playing</h4>\n<ul>\n<li>Ensure you're in a voice channel</li>\n<li>Check audio permissions</li>\n<li>Verify sound file availability</li>\n</ul>\n<h4>API Errors</h4>\n<ul>\n<li>Check API key configuration</li>\n<li>Verify network connectivity</li>\n<li>Check rate limiting</li>\n</ul>\n<h3>Getting Help</h3>\n<ul>\n<li>Check the <a href=\"https://github.com/mgiovani/my-instants-discord-bot/issues\">Issues</a> page</li>\n<li>Join our <a href=\"https://discord.gg/your-server\">Discord server</a></li>\n<li>Read the <a href=\"https://github.com/mgiovani/my-instants-discord-bot/wiki\">documentation</a></li>\n</ul>\n<h2>License</h2>\n<p>This project is licensed under the MIT License - see the <a href=\"LICENSE\">LICENSE</a> file for details.</p>\n<h2>Acknowledgments</h2>\n<ul>\n<li>Discord.py community for the excellent library</li>\n<li>MyInstants for providing the sound API</li>\n<li>All contributors and users who helped improve the bot</li>\n</ul>\n<hr>\n<p><em>Bring the fun of MyInstants to your Discord server!</em></p>\n"
  }
]

export function getProjectsData(lang: 'en' | 'zh') {
  const projects = allProjects.map(project => ({
    id: project.id,
    title: project[`title_${lang}`],
    description: project[`description_${lang}`],
    image: project.image,
    tags: project[`tags_${lang}`],
    github: project.github,
    demo: project.demo,
    content: project[`content_${lang}`],
  }))
  
  const featuredProjects = projects.slice(0, 3)
  return { projects, featuredProjects }
}
